<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>lpmoon</title>
		<description>Welcome to my blog！</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Lkd 5</title>
				<description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;第五章 系统调用&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%E5%92%8C%E5%86%85%E6%A0%B8%E4%BA%A4%E4%BA%92&quot;&gt;和内核交互&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#apis-posix-and-the-c-library&quot;&gt;APIs, POSIX, and the C Library&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#apis&quot;&gt;APIs&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#posix&quot;&gt;POSIX&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#c%E5%BA%93&quot;&gt;c库&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;系统调用&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%8F%B7&quot;&gt;系统调用号&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%80%A7%E8%83%BD&quot;&gt;系统调用性能&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%A4%84%E7%90%86%E5%99%A8&quot;&gt;系统调用处理器&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E6%8C%87%E5%90%91%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;指向正确的系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92&quot;&gt;参数传递&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9A%84%E5%AE%9E%E7%8E%B0&quot;&gt;系统调用的实现&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;实现系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C&quot;&gt;参数校验&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87&quot;&gt;系统调用上下文&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%BB%91%E5%AE%9A%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;绑定系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%9C%A8%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;在用户空间调用系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;为什么不要自己实现系统调用&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第五章-系统调用&quot;&gt;第五章 系统调用&lt;/h1&gt;
&lt;p&gt;在任何的现代操作系统中，都提供了一系列的接口用于运行在用户空间的进程和系统交互。这些接口用于完成下面的任务:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;用于控制硬件&lt;/li&gt;
  &lt;li&gt;创建新的进程或者和已有的进程进行交互&lt;/li&gt;
  &lt;li&gt;请求其他资源的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正是因为有了这些接口，以及操作系统不允许程序直接操作它们需要的资源，才使得系统稳定运行。&lt;/p&gt;

&lt;h2 id=&quot;和内核交互&quot;&gt;和内核交互&lt;/h2&gt;
&lt;p&gt;系统调用在用户进程和硬件之间插入了一个适配层，这个适配层用于满足下面的三个需求:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;给用户空间提供抽象的硬件接口&lt;/strong&gt;。
    &lt;ul&gt;
      &lt;li&gt;比如当读写一个文件的时候，应用不需要关心磁盘类型，或者文件所在文件系统的类型&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;保证系统安全性和稳定性&lt;/strong&gt;。内核充当了用户空间和系统资源之间的中间人，所以它可以基于权限，用户以及其他规则来限制来自用户空间的资源访问。
    &lt;ul&gt;
      &lt;li&gt;比如，内核会防止应用不正确的使用硬件，窃取其他进程的资源，以及其他对系统有害的操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;用户空间和其他系统资源之间的通用层，用于给进程提供虚拟化系统&lt;/strong&gt;。如果系统允许进程不加限制的直接访问系统资源，那么实现多任务和虚拟内存就不太可能了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在linux系统中，除了异常和陷入(见注释)，系统调用是用户空间和内核交互的唯一方法，以及进入到内核的唯一入口。其他接口，比如设备文件和&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;，都是通过系统调用实现的。有趣的是，Linux中的系统调用的数量远比其他系统要少。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注释1: 陷入是一种异常，通常情况下也是一种同步的中断。陷入处理后返回的地址为陷入指令之后的指令对应的地址。陷入通常会导致系统切换到内核态，在某些情况下陷入用户进程监控或者调试。https://en.wikipedia.org/wiki/Trap_(computing)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;apis-posix-and-the-c-library&quot;&gt;APIs, POSIX, and the C Library&lt;/h2&gt;

&lt;h3 id=&quot;apis&quot;&gt;APIs&lt;/h3&gt;
&lt;p&gt;应用程序通常由用户空间实现的API来编写，而不是直接通过系统调用，这是因为应用所使用的API和内核实际提供的系统调用之间不需要直接的关联（见注释2）。&lt;/p&gt;

&lt;p&gt;API是应用所使用的一系列接口。这些接口通常是:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;包含一个系统调用&lt;/li&gt;
  &lt;li&gt;包含多个系统调用&lt;/li&gt;
  &lt;li&gt;不包含任何系统调用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同一个API在不同操作系统之间的定义是相同的，但是其内部实现可能因为操作系统不同而有很大的区别。
下面的图展示了POSIX API，C库和系统调用之间的关系。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://notes.shichao.io/lkd/figure_5.1.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_5.1.png&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注释2: 我认为系统调用通常是足够抽象和通用的，因为需要满足各种不同的需求，并且系统调用需要满足单一职责原则。正是因为系统调用的这种特性，所以其对应用层面的开发者不够友好。同时有一些操作需要使用到多个系统调用让直接使用系统调用开发变得困难。所以引入用户空间的API就显得十分重要了，API可以通过封装屏蔽系统调用带来的复杂度，同时可以通过聚合多个系统调用来提供更为丰富的功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;posix&quot;&gt;POSIX&lt;/h3&gt;
&lt;p&gt;unix系统中最通用的API都是基于POSIX的。POSIX是由一系列的IEEE标准组成，旨在为unix提供一套通用的标准。linux在实现上尽量提供POSIX和SUSv3风格的接口。&lt;/p&gt;

&lt;h3 id=&quot;c库&quot;&gt;c库&lt;/h3&gt;

&lt;p&gt;linux中的系统调用和大多数unix系统一样，大部分是通过c库提供服务的。&lt;/p&gt;

&lt;p&gt;C库实现了unix系统中的重要API，包括:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;标准c库&lt;/li&gt;
  &lt;li&gt;系统调用接口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;c库被所有c语言程序使用，这是因为c语言的原生性，可以轻松的嵌入到其他编程语言中。c库还额外提供了多数POSIX API。&lt;/p&gt;

&lt;p&gt;从应用程序员的观点来看，系统调用是不需要关注的，他们需要关注的是是API。相反的，内核只关注系统调用，库函数调用哪个系统调用或者应用程序由哪些系统调用组成内核是不关注的。尽管如此，内核还是需要关注一个系统调用的使用价值，并且尽量将系统调用实现的通用简洁。&lt;/p&gt;

&lt;p&gt;unix接口定义的哲学是”Provide mechanism, not policy”。换句话说，unix的系统调用提供一个特定的方法，该方法适用于某一特定的抽象场景。内核不关注应用层面如何调用这些方法（系统调用）。&lt;/p&gt;

&lt;h2 id=&quot;系统调用&quot;&gt;系统调用&lt;/h2&gt;
&lt;p&gt;系统调用通常通过c库提供的方法访问。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统调用可以有0个，1个或者多个参数，通常会导致一个或者多个副作用。
    &lt;ul&gt;
      &lt;li&gt;尽管几乎所有的系统调用都有副作用（改变系统的状态），但是还有一些系统调用比如&lt;code class=&quot;highlighter-rouge&quot;&gt;getpid()&lt;/code&gt;，仅仅从内核获取一些数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;系统调用提供一个long型（用于兼容64位架构）的返回值，表明系统调用成功或者失败:
    &lt;ul&gt;
      &lt;li&gt;通常情况下，一个负值代表有错误发生&lt;/li&gt;
      &lt;li&gt;通常情况下，0表示成功，尽管不都是如此&lt;/li&gt;
      &lt;li&gt;c库将错误码写入到全局的&lt;code class=&quot;highlighter-rouge&quot;&gt;errno&lt;/code&gt;变量里，这个错误码可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;perror()&lt;/code&gt;转化为人可读的错误。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;系统调用有特定的行为（预定义好的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;getpid()&lt;/code&gt;用于返回当前进程的pid。该方法在内核中的实现十分简单：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SYSCALL_DEFINE0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_tgid_vnr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns current-&amp;gt;tgid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;系统调用的定义里没有关于如何实现的细节。内核在实现系统调用的时候必须让系统调用满足特定的需求，但是如何实现内核是不关注的，只要最终的结果正确即可。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SYSCALL_DEFINE0&lt;/code&gt; 是一个简单的宏，用于定义没有参数的系统调用。上面例子中的系统调用展开后为下面的代码&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;asmlinkage&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asmlinkage&lt;/code&gt;修饰符用于告诉编译器只在栈寻找方法的参数（见注释3）。这个是每个系统调用都需要的修饰符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法返回了一个long类型的数据。为了兼容32和64位操作系统，系统调用从内核返回到用户空间的时候返回一个long类型的数据。所有系统调用的命名规则是: 如果系统调用为bar()，那么在内核中对应的函数是sys_bar()。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注释3：
https://www.quora.com/Linux-Kernel-What-does-asmlinkage-mean-in-the-definition-of-system-calls
例如当系统调用int sethostname(char *name, size_t len)的时候，对应的汇编代码大概为
mov ecx, len     ; amount of bytes in name
mov ebx, name ; address of name string
mov	eax, 170    ; syscall number (sys_sethostname)
int 0x80            ; x86 call the kernel – sysenter is another entry point
其中int 0x80是一个软中断，用于进入到内核中执行system_call()。该方法会将eax, ebx, ecx等寄存器存放到进程栈上，然后继续调用实际的系统调用。由于参数都已经存放在栈上了，所以需要asmlinkage告诉编译器从栈上取参数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;系统调用号&quot;&gt;系统调用号&lt;/h3&gt;

&lt;p&gt;在Linux中，每个系统调用都分配了一个唯一的系统调用号用来索引系统调用。当用户空间进程执行系统调用的时候，系统调用号来指定哪个系统调用应该被执行。进程不通过系统调用的名称来调用系统调用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一旦系统调用号和系统调用绑定就不可以更改了。否则哪些已经编译好的程序会无法正常使用。&lt;/li&gt;
  &lt;li&gt;如果一个系统调用被移除了，它对应的系统调用号也不可以回收利用，否则之前编译好的代码在运行的时候可能无法按照预期调用某个系统调用，而会调用一个错误的系统调用。&lt;/li&gt;
  &lt;li&gt;linux提供了一个叫做”note implemented”的系统调用，sys_ni_syscall()，该系统调用除了返回ENOSYS其他事情都不会做，如果遇到了无效的系统调用时该系统调用会作为异常处理。当某个系统调用被移除或者无效的时候，这个方法会作为”plug the hole”（其实就是默认处理器）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内核有一份列表存储了在系统注册过的系统调用，该表为于&lt;code class=&quot;highlighter-rouge&quot;&gt;sys_call_table&lt;/code&gt;，在x86-64系统中定义在&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/arch/x86/kernel/syscall_64.c&quot;&gt;arch/x86/kernel/syscall_64.c&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所有的系统调用号定义在&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/include/asm-generic/unistd.h&quot;&gt;include/asm-generic/unistd.&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;系统调用性能&quot;&gt;系统调用性能&lt;/h3&gt;

&lt;p&gt;系统调用在linux中执行的速度要快于其他很多系统，因为&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;linux上下文切换的速度很快: 进入内核和退出内核都经过优化，相对简单&lt;/li&gt;
  &lt;li&gt;系统调用处理器和系统调用本身都很简洁&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统调用处理器&quot;&gt;系统调用处理器&lt;/h2&gt;

&lt;p&gt;用户空间的应用无法直接执行内核代码。他们无法直接通过简单的方法调用来执行内核中的方法因为内核处于受保护的内存中。否则，系统的安全性和稳定性将不复存在。&lt;/p&gt;

&lt;p&gt;用户空间的程序通知内核他们想执行系统调用，并且将系统切换到内核态，这时候系统调用可以在内核态执行。这种机制是通过软中断完成的: 产生一个异常，然后系统切换到内核态，执行异常处理。在这种情况下对应的异常处理就是系统调用处理器。&lt;/p&gt;

&lt;p&gt;在x86系统上，定义好的软中断号是128，通过指令&lt;code class=&quot;highlighter-rouge&quot;&gt;int 0x80&lt;/code&gt;触发。它会将系统切换到内核态，同时执行异常表中的128，对应的是系统调用处理器。系统调用处理器对应的方法是s&lt;code class=&quot;highlighter-rouge&quot;&gt;system_call()&lt;/code&gt;。这个方法的实现和体系结构密切相关，在x86-64系统上它的实现位于&lt;code class=&quot;highlighter-rouge&quot;&gt;entry_64.s&lt;/code&gt;中。（&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/arch/x86/kernel/entry_64.S&quot;&gt;arch/x86/kernel/entry_64.S&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;最近，x86处理器添加了一个叫做&lt;strong&gt;sysenter&lt;/strong&gt;的特性，相比于使用int中断指令该特性提供了一个更快的陷入内核的方法。内核很快添加了对该特性的支持。不管系统调用处理器是如何被调用的，用户态需要通过异常或者陷入进入到内核。&lt;/p&gt;

&lt;h3 id=&quot;指向正确的系统调用&quot;&gt;指向正确的系统调用&lt;/h3&gt;

&lt;p&gt;linux系统调用的更多细节参见&lt;a href=&quot;https://notes.shichao.io/asm/#interfacing-with-linux-system-calls&quot;&gt;Interfacing with Linux&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;只进入到内核空间是不够的: 系统调用号必须也传入到内核中。&lt;/p&gt;

&lt;p&gt;在x86系统中，系统调用号通过寄存器eax传入到内核中:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在陷入内核之前，用户空间将系统调用好放到eax中用于调用对应的系统调用&lt;/li&gt;
  &lt;li&gt;系统调用处理器会从eax读取系统调用号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法&lt;code class=&quot;highlighter-rouge&quot;&gt;system_call()&lt;/code&gt;通过将系统调用号和&lt;code class=&quot;highlighter-rouge&quot;&gt;NR_syscalls&lt;/code&gt;进行比较来检查其合法性。如果大于或者等于&lt;code class=&quot;highlighter-rouge&quot;&gt;NR_syscalls&lt;/code&gt;，方法会返回&lt;code class=&quot;highlighter-rouge&quot;&gt;-ENOSYS&lt;/code&gt;。否则对应的系统调用会被调用:&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/arch/x86/kernel/entry_64.S#L487&quot;&gt;arch/x86/kernel/entry_64.S#L487&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys_call_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因为系统调用表中的每一个项都是64bits的，内核将系统调用号乘以8，然后将得到的值作为索引在系统调用表中查找对应的系统调用。在x86-32位系统上，代码类似，不过8被替换成了4。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://notes.shichao.io/lkd/figure_5.2.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_5.2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;参数传递&quot;&gt;参数传递&lt;/h3&gt;

&lt;p&gt;除了系统调用号之外，多数的系统调用还需要一个或者多个参数传递到内核。在陷入的时候，用户空间必须将对应的参数传递到内核中。最早的传递方法和传递系统调用号类似: 参数存放到寄存中。在x86-32系统上，这些寄存器包括ebx, ecx, edx, esi和edi，依次存放前五个参数。如果有6个或者更多参数，一个寄存器用来存放一个指针，该指针指向存放在用户空间的所有参数所在的地址。&lt;/p&gt;

&lt;p&gt;返回到用户空间的值同样也存放在寄存器中。在x86中，返回值存放在eax寄存器。&lt;/p&gt;

&lt;h2 id=&quot;系统调用的实现&quot;&gt;系统调用的实现&lt;/h2&gt;

&lt;p&gt;系统调用的实现不需要关注系统调用处理器的实际行为（意思应该是两者实现上解耦）。因此，在Linux添加一个新的系统调用是十分简单的。最复杂的工作集中在设计和实现系统调用；在内核中注册已经实现好的系统调用是很简单的。&lt;/p&gt;

&lt;h3 id=&quot;实现系统调用&quot;&gt;实现系统调用&lt;/h3&gt;

&lt;p&gt;实现系统调用的第一步是设计系统调用的目标，系统调用必须只包含一个目标（单一职责原则）。多语义（通过一个参数控制做不同的事情）的系统调用在linux上不被鼓励的。&lt;code class=&quot;highlighter-rouge&quot;&gt;ioctl()&lt;/code&gt;是一个例子用来告诉我们什么不应该做。&lt;/p&gt;

&lt;p&gt;考虑系统调用的参数，返回值和异常码。系统调用必须拥有尽可能少数量的参数，同时必须是清晰的简洁的。系统调用的语义和行为是很重要的；它们不能改变，因为已经存在的应用强依赖系统调用现有的语义。许多系统调用提供flag参数用于向前兼容。这个标志不是用来在一个系统调用中提供多语义，而是在不破坏向后兼容性的前提下用来开启新的功能。&lt;/p&gt;

&lt;p&gt;设计一个系统调用需要着眼于未来。系统调用的作用必须保持稳定，但是使用它的地方可能发生改变。记住unix的哲学: “Provide mechanism, not policy.”。&lt;/p&gt;

&lt;p&gt;当你编写一个系统调用的时候，你需要从未来的角度考虑到可移植性和鲁棒性。unix系统中的系统调用已经经历了时间的考验；他们中的大多数在30年前已经出现，并且在今天看来依然十分适用。&lt;/p&gt;

&lt;h3 id=&quot;参数校验&quot;&gt;参数校验&lt;/h3&gt;

&lt;p&gt;系统调用必须仔细的验证它们的参数，确保它们的合法性，这样才能保证系统的安全和稳定。&lt;/p&gt;

&lt;p&gt;一个最主要的检查点是用户提供指针的校验。通过指针定位到用户空间之前，系统必须保证:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;指针指向了用户空间的内存区域。进程不能欺骗系统读取内核的数据。&lt;/li&gt;
  &lt;li&gt;指针指向了进程的地址空间中的内存区域。进程不能欺骗系统读取其他进程的数据。&lt;/li&gt;
  &lt;li&gt;进程不能够绕过内存权限控制。如果需要读取内存，这些内存必须是被标记可读的。如果需要写入内存，这些内存必须是被标记可写的。如果是运行代码，那么内存必须标记为可运行的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内核提供了两个方法用来满足上面的校验，并且可以将内存从用户空间拷贝到内核空间或者从内核空间拷贝到用户空间。注意内核代码不能盲目的从用户空间获取数据。必须采用下面提供的两个方法中的一个。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_to_user()&lt;/code&gt;用来写入用户空间。这方法有三个参数:
    &lt;ul&gt;
      &lt;li&gt;第一个参数是进程地址空间中的写入目标地址&lt;/li&gt;
      &lt;li&gt;第二个参数是写入数据在内核空间的源地址&lt;/li&gt;
      &lt;li&gt;第三个参数是写入数据的大小&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_from_user()&lt;/code&gt;用来从用户空间读取数据。和&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_to_user()&lt;/code&gt;类似。函数从第二个参数所指向的地址读取数据然后拷贝到第一个参数指向的地址，拷贝的大小为第三个参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两个方法都会返回没有成功读取的字节数。如果成功，则返回0；在失败的时候通常会返回&lt;code class=&quot;highlighter-rouge&quot;&gt;-EFAULT&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面的例子&lt;code class=&quot;highlighter-rouge&quot;&gt;silly_copy()&lt;/code&gt;使用了上面的两个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_from_user()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_to_user()&lt;/code&gt;。它从第一个参数对应的地址拷贝数据到第二个参数对应的地址。这个方法虽然可以正常执行，但是却不是最优的，因为将数据拷贝到内核是没有意义的。虽然如此，它仍能帮助我们理解上面的两个方法:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
* silly_copy - pointless syscall that copies the len bytes from
* ‘src’ to ‘dst’ using the kernel as an intermediary in the copy.
* Intended as an example of copying to and from the kernel.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SYSCALL_DEFINE3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;silly_copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* copy src, which is in the user’s address space, into buf */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_from_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* copy buf into dst, which is in the user’s address space */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy_to_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* return amount of data copied */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这两个方法都可能会阻塞。比如，当请求的业不在物理内存而是被交换到磁盘的时候，阻塞有可能发生。在这种情况下，进程会阻塞直到页错误处理将对应的内存从磁盘读取到物理内存。&lt;/p&gt;

&lt;p&gt;最后的可能检查是权限检查。在老版本的linux系统中，调用系统调用需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;suser()&lt;/code&gt;获取root权限。这个方法检查当前用户是否是root用户；现在这个机制已经被移除了，并且添加了更好的机制。&lt;/p&gt;

&lt;p&gt;新系统引入了机制用来检查特定资源的权限。&lt;code class=&quot;highlighter-rouge&quot;&gt;capable()&lt;/code&gt;接受一个权限检查标志，如果调用者有权限则返回非0否则返回0。比如，&lt;code class=&quot;highlighter-rouge&quot;&gt;capable(CAP_SYS_NICE)&lt;/code&gt;检查调用者是否有权限修改别的进程的nice值。默认情况下，超级用户拥有所有权限，而非超级用户什么权限都没有。&lt;/p&gt;

&lt;p&gt;下面的例子是系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;reboot()&lt;/code&gt;。可以看到它的第一步是保证调用者有&lt;code class=&quot;highlighter-rouge&quot;&gt;CAP_SYS_REBOOT&lt;/code&gt;权限。如果这个判断条件被移除了，任何进程都可以重启系统了。
&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sys.c#L368&quot;&gt;kernel/sys.c#L368&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SYSCALL_DEFINE4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reboot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;magic1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;magic2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* We only trust the superuser with rebooting the system. */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAP_SYS_BOOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EPERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* For safety, we require &quot;magic&quot; arguments. */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_MAGIC1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;magic2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_MAGIC2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;magic2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_MAGIC2A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;magic2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_MAGIC2B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;magic2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_MAGIC2C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/* Instead of trying to make the power_off code look like
     * halt when pm_power_off is not set do it the easy way.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_POWER_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pm_power_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_HALT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reboot_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_RESTART&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel_restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_CAD_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;C_A_D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_CAD_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;C_A_D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_HALT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel_halt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cannot halt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_POWER_OFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel_power_off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;do_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_RESTART2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strncpy_from_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;kernel_restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef CONFIG_KEXEC
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_KEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_kexec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef CONFIG_HIBERNATION
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LINUX_REBOOT_CMD_SW_SUSPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reboot_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;系统调用上下文&quot;&gt;系统调用上下文&lt;/h2&gt;

&lt;p&gt;在执行系统调用的时候，内核处于进程的上下文中。”当前指针”指向当前触发系统调用的进程。&lt;/p&gt;

&lt;p&gt;在进程的上下文中，内核可以睡眠可以被抢占。下面的两个观点是很重要的:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可以睡眠代表系统调用可以使用内核的大部分功能。
    &lt;ul&gt;
      &lt;li&gt;这个功能大大的简化了系统调用的开发难度&lt;/li&gt;
      &lt;li&gt;中断处理是不能够睡眠的，这大大的限制了中断处理所能够做的事情，相比之下系统调用可以在进程空间做很多事情。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;系统调用是可以被强占的。
    &lt;ul&gt;
      &lt;li&gt;新的任务可能会执行同样的系统调用，所以系统调用必须要是可重入的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当系统调用返回的时候，进程切换回用户空间继续执行刚才的代码。&lt;/p&gt;

&lt;h3 id=&quot;绑定系统调用&quot;&gt;绑定系统调用&lt;/h3&gt;

&lt;p&gt;注册一个已经编写好的系统调用的步骤是琐碎的:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在系统调用表的结尾添加一个新的项。在支持系统调用的每一个体系结构上都需要执行这个操作。系统调用表的index从0开始，每个index表示一个系统调用号。&lt;/li&gt;
  &lt;li&gt;在每个支持系统调用的体系结构中，系统调用号都存放在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asm/unistd.h&amp;gt;&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;将系统调用编译到内核镜像中（而不是编译成一个模块）。只需要简单的将系统调用放到&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/&lt;/code&gt;目录下的关联文件中，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.c&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.c&lt;/code&gt;中存放了各种各样的系统调用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以一个虚构的系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;为例。我们希望将&lt;code class=&quot;highlighter-rouge&quot;&gt;sys_foo()&lt;/code&gt;添加到系统调用表中。对于多数的体系结构而言，系统调用表位于&lt;code class=&quot;highlighter-rouge&quot;&gt;entry.S&lt;/code&gt;中，该文件和下面的内容类似:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ENTRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys_call_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_restart_syscall&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 0 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_exit&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_fork&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_read&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_write&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_open&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 5 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_eventfd2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_epoll_create1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_dup3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 330 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_pipe2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_inotify_init1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_preadv&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_pwritev&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_rt_tgsigqueueinfo&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 335 */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_perf_event_open&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_recvmmsg&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;尽管没有明确的指出该系统调用对应的系统调用号，但是我们还是可以很容易的看出对应的系统调用号是338。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;对于每个你想支持的体系结构，系统调用都需要被添加到对应的系统调用表中。&lt;/li&gt;
  &lt;li&gt;每个体系结构中该系统调用对应的系统调用号可以不同，因为系统调用号是体系结构特有的部分。&lt;/li&gt;
  &lt;li&gt;通常情况下，你应该在每个体系结构中都支持该系统调用。&lt;/li&gt;
  &lt;li&gt;根据约定需要每隔五个项添加一个数字，方便于查找系统对应的系统调用号是多少。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来系统调用号被添加到了&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asm/unistd.h&amp;gt;&lt;/code&gt;中，像下面这样:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
* This file contains the system call numbers.
*/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __NR_restart_syscall 0
#define __NR_exit 1
#define __NR_fork 2
#define __NR_read 3
#define __NR_write 4
#define __NR_open 5
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define __NR_signalfd4 327
#define __NR_eventfd2 328
#define __NR_epoll_create1 329
#define __NR_dup3 330
#define __NR_pipe2 331
#define __NR_inotify_init1 332
#define __NR_preadv 333
#define __NR_pwritev 334
#define __NR_rt_tgsigqueueinfo 335
#define __NR_perf_event_open 336
#define __NR_recvmmsg 337
#define __NR_foo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后就是系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;的实现了。因为系统调用必须被编译进内核镜像中，所以在这个例子中我们将其定义到&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sys.c&lt;/code&gt;中。你应该将系统调用放到关联性最强的地方；例如如果系统调用和调度相关，它们应该被定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched.c中&lt;/code&gt;中。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;asm/page.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
* sys_foo – everyone’s favorite system call.
*
* Returns the size of the per-process kernel stack.
*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;asmlinkage&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sys_foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THREAD_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;启动内核，用户空间就可以调用&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;这个系统调用了。&lt;/p&gt;

&lt;h3 id=&quot;在用户空间调用系统调用&quot;&gt;在用户空间调用系统调用&lt;/h3&gt;

&lt;p&gt;C库提供了对系统调用的支持。应用程序可以引入标准头，然后链接到c库来使用你的系统调用。&lt;/p&gt;

&lt;p&gt;linux提供了一系列的宏来访问系统调用。这些宏用于设置寄存器内容，然后调用陷入指令。这些宏命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;_syscalln()&lt;/code&gt;，n位于0到6之间。这个n用于表示传入到系统调用的参数数量，因为宏需要知道有几个参数需要被设置到寄存器上。&lt;/p&gt;

&lt;p&gt;例如，系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt;，有如下的定义:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在没有显示的库支持的情况下，系统调用宏可以这样使用系统调用:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define __NR_open 5
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syscall3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;应用程序可以简单的调用&lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;一个宏有2+2*n个参数:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;第一个参数对应系统调用的返回值类型&lt;/li&gt;
  &lt;li&gt;第二个参数对应系统调用的名称&lt;/li&gt;
  &lt;li&gt;其他的则是各个参数的类型和名称，需要注意的这些参数的顺序和系统调用严格一致&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__NR_open&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/arch/x86/include/asm/unistd_64.h#L19&quot;&gt;arch/x86/include/asm/unistd_64.h#L19&lt;/a&gt;)定义在```&amp;lt;asm/unistd.h&amp;gt;中。对应的是系统调用号。&lt;/p&gt;

&lt;p&gt;通过汇编内联的方式，&lt;code class=&quot;highlighter-rouge&quot;&gt;_syscall3&lt;/code&gt;可以扩展到c函数中。这段汇编主要用于将系统调用号和参数放到对应的寄存器中，并且调用陷入指令进入到内核中。如果需要调用系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt;，只需要将上面的宏放到应用的对应位置即可。&lt;/p&gt;

&lt;p&gt;比如我们要调用之前定义的系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;foo()&lt;/code&gt;，我们需要这么做:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define __NR_foo 283
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__syscall0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The kernel stack size is %ld&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;为什么不要自己实现系统调用&quot;&gt;为什么不要自己实现系统调用&lt;/h3&gt;

&lt;p&gt;不鼓励添加自行添加新的系统调用，如果非要添加你需要格外小心谨慎。&lt;/p&gt;

&lt;p&gt;下面是将一个新接口实现为系统调用的支持和反对观点：&lt;/p&gt;

&lt;p&gt;支持:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;系统调用易于实现并且使用简单&lt;/li&gt;
  &lt;li&gt;在Linux上系统调用的性能不错&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;反对:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;你需要官方分配一个系统调用号给你&lt;/li&gt;
  &lt;li&gt;一旦系统调用进入到稳定的内核版本中，它就不可以再改变了。否则会似的很多应用无法执行。&lt;/li&gt;
  &lt;li&gt;系统调用无法被脚本调用，并且不能在文件系统中直接调用&lt;/li&gt;
  &lt;li&gt;因为你需要一个进程调度号，掌控和使用一个非主流的内核分支是十分困难的&lt;/li&gt;
  &lt;li&gt;对于简单的信息交换，系统调用太重了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

</description>
				<pubDate>Sat, 13 Jan 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/linux/2018/01/13/lkd-5.html</link>
				<guid isPermaLink="true">http://localhost:4000/linux/2018/01/13/lkd-5.html</guid>
			</item>
		
			<item>
				<title>Lkd 4</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6&quot;&gt;第四章 进程调度&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%E5%A4%9A%E4%BB%BB%E5%8A%A1&quot;&gt;多任务&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E6%8A%A2%E5%8D%A0%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1&quot;&gt;抢占式多任务&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%8D%8F%E5%90%8C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1&quot;&gt;协同式多任务&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8&quot;&gt;linux的进程调度器&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%AD%96%E7%95%A5&quot;&gt;策略&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#io%E5%AF%86%E9%9B%86%E5%9E%8B%E8%BF%9B%E7%A8%8B&quot;&gt;IO密集型进程&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7&quot;&gt;进程优先级&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#nice%E5%80%BC%E5%92%8C%E5%AE%9E%E6%97%B6%E4%BC%98%E5%85%88%E7%BA%A7&quot;&gt;nice值和实时优先级&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E6%97%B6%E9%97%B4%E7%89%87&quot;&gt;时间片&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#linux%E7%9A%84%E6%97%B6%E9%97%B4%E7%89%87&quot;&gt;linux的时间片&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E5%AE%9E%E4%BE%8B&quot;&gt;调度策略实例&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E4%B8%8A%E9%9D%A2%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%9B%AE%E6%A0%87%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84&quot;&gt;上面的两个目标是如何实现的&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95&quot;&gt;linux调度算法&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E7%B1%BB%E5%9E%8B&quot;&gt;调度类型&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#unix%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6&quot;&gt;unix系统中的进程调度&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6&quot;&gt;公平调度&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux%E7%9A%84%E8%B0%83%E5%BA%A6%E5%AE%9E%E7%8E%B0&quot;&gt;linux的调度实现&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E6%97%B6%E9%97%B4%E7%BB%9F%E8%AE%A1&quot;&gt;时间统计&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E7%BB%93%E6%9E%84%E4%BD%93&quot;&gt;调度结构体&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#nice%E5%80%BC%E5%88%B0%E6%9D%83%E9%87%8D%E7%9A%84%E6%98%A0%E5%B0%84&quot;&gt;nice值到权重的映射&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E8%99%9A%E6%8B%9F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4&quot;&gt;虚拟运行时间&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#calcdeltafair%E5%87%BD%E6%95%B0&quot;&gt;calc_delta_fair函数&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%BF%9B%E7%A8%8B%E9%80%89%E6%8B%A9&quot;&gt;进程选择&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E9%80%89%E6%8B%A9%E4%B8%8B%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1&quot;&gt;选择下一个任务&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%B7%BB%E5%8A%A0%E8%BF%9B%E7%A8%8B%E5%88%B0%E7%BA%A2%E9%BB%91%E6%A0%91&quot;&gt;添加进程到红黑树&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%A7%BB%E9%99%A4%E8%BF%9B%E7%A8%8B&quot;&gt;在二叉树中移除进程&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E5%99%A8%E5%85%A5%E5%8F%A3&quot;&gt;调度器入口&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#fairschedclass-scheduler-class&quot;&gt;fair_sched_class scheduler class&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%9D%A1%E7%9C%A0%E5%92%8C%E5%94%A4%E9%86%92&quot;&gt;睡眠和唤醒&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E7%AD%89%E5%BE%85%E9%98%9F%E5%88%97&quot;&gt;等待队列&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E5%94%A4%E9%86%92&quot;&gt;唤醒&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E6%8A%A2%E5%8D%A0%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2&quot;&gt;抢占和上下文切换&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#needresched&quot;&gt;need_resched&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%94%A8%E6%88%B7%E6%8A%A2%E5%8D%A0&quot;&gt;用户抢占&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%86%85%E6%A0%B8%E6%8A%A2%E5%8D%A0&quot;&gt;内核抢占&lt;/a&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%8A%A2%E5%8D%A0%E8%AE%A1%E6%95%B0%E5%99%A8-preemptcount&quot;&gt;抢占计数器 preempt_count&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#%E6%98%8E%E7%A1%AE%E7%9A%84%E5%86%85%E6%A0%B8%E6%8A%A2%E5%8D%A0&quot;&gt;明确的内核抢占&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E5%AE%9E%E6%97%B6%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5&quot;&gt;实时调度策略&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#schedfifo%E7%AD%96%E7%95%A5&quot;&gt;SCHED_FIFO策略&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#schedrr%E7%AD%96%E7%95%A5&quot;&gt;SCHED_RR策略&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E7%A1%AC%E5%AE%9E%E6%97%B6%E5%92%8C%E8%BD%AF%E5%AE%9E%E6%97%B6&quot;&gt;硬实时和软实时&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;调度器相关的系统调用&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5%E5%92%8C%E4%BC%98%E5%85%88%E7%BA%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;调度策略和优先级相关的系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%E5%A4%84%E7%90%86%E5%99%A8%E4%BA%B2%E5%92%8C%E6%80%A7%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8&quot;&gt;处理器亲和性系统调用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#yielding-processor-time&quot;&gt;Yielding Processor Time&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%E7%96%91%E9%97%AE%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88&quot;&gt;疑问和解决方案&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h1 id=&quot;第四章-进程调度&quot;&gt;第四章 进程调度&lt;/h1&gt;

&lt;p&gt;本章节讨论进程调度器，进程调度器是内核的子系统用于管理进程工作。
进程调度器将有限的处理器资源分配给系统的各个进程。它负责优化系统，并且让用户觉得所有的进程是在系统上同时运行的。&lt;/p&gt;

&lt;p&gt;为了更好的利用处理器资源，我们假设系统中运行着多个进程，并且这些进程一直处于运行状态。如果系统中进程的数量超过了处理器的数量，那么某一时刻一定有一些进程不处于运行状态。这些进程等待运行，进程调度室必须决定下一刻哪些进程能够得到调度，在处理器上运行。&lt;/p&gt;

&lt;h2 id=&quot;多任务&quot;&gt;多任务&lt;/h2&gt;

&lt;p&gt;多任务操作系统能够同时运行多个进程，而不是只有一个。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在单处理器机器上，给人的感觉就像多个进程同时运行(并行)。&lt;/li&gt;
  &lt;li&gt;在多处理器机器上，多任务系统可以让多进程在不同的处理器上并行运行(需要注意并发和并行的区别)。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无论是单处理器还是多处理器，多任务系统都可以让进程阻塞或者睡眠。尽管这些进程还在内存中，但是是不了运行的。这些进程利用内核等待某些事件的到来。(键盘输入，网络数据，或者仅仅是等待固定的时间)&lt;/p&gt;

&lt;p&gt;多任务处理器分为两类:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;协同式&lt;/li&gt;
  &lt;li&gt;抢占式&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;抢占式多任务&quot;&gt;抢占式多任务&lt;/h3&gt;

&lt;p&gt;linux和其他unix分支以及大多数的现代操作系统一样，都实现了基于抢占的多任务系统。在抢占式多任务中，调度器决定什么时候进程会终止运行以及新的进程开始运行。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;抢占: 无意识的挂起一个正在运行的进程&lt;/li&gt;
  &lt;li&gt;进程时间片: 进程在被抢占前所能够运行的时间是提前分配好的
    &lt;ul&gt;
      &lt;li&gt;通过管理时间片使得调度器能够做出全局的调度决定，这样可以防止某个进程独占处理器&lt;/li&gt;
      &lt;li&gt;现在大多数的操作系统，时间片是通过某个函数动态计算的，并且可以通过系统配置&lt;/li&gt;
      &lt;li&gt;linux特有的”fair”调度器本质上不直接分配时间片，但是这种做法获得了意想不到的效果&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;协同式多任务&quot;&gt;协同式多任务&lt;/h3&gt;
&lt;p&gt;在协同式的多任务系统中，一个进程不会停止除非自己主动让出处理。这种主动让出处理器的行为叫做yielding，但是操作系统不能强制进程这么做。
这种做法的缺点是显而易见的:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调度器不能做出全局的决定: 进程应该运行多长时间&lt;/li&gt;
  &lt;li&gt;进程独占处理的时间可能超出用户的预期&lt;/li&gt;
  &lt;li&gt;一个被挂起的进程不主动让出处理器可能会导致整个系统瘫痪&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux的进程调度器&quot;&gt;linux的进程调度器&lt;/h2&gt;
&lt;p&gt;从Linux在1991的第一个版本到后面的2.4内核版本，linux的进程调度器都是比较简单的。它的工作方式很容易理解，但是在多处理器或者多进程的场景下可扩展性和性能斗比较差。&lt;/p&gt;

&lt;p&gt;在2.5内核版本汇总，O(1)调度器解决了之前调度器性能差的缺点，并且提供了一些强大的特性。通过一个时间复杂度为常量的时间片计算算法以及每个处理器有自己的运行队列，弥补了之前调度器的局限&lt;/p&gt;

&lt;p&gt;但是o(1)调度器在调度低延迟（交互式）应用方面有一些致命的缺陷。因此尽管O(1)调度器对于缺少交互式进程的大型服务器是理想的选择，但是却不适合桌面系统。&lt;/p&gt;

&lt;p&gt;从2.6内核版本开始，内核研发者引入了一些新的进程调度器，旨在解决O(1)调度在交互进程调度方面的性能问题。这些调度器中最显著的当属&lt;strong&gt;Rotating Staircase Deadline&lt;/strong&gt; ，它介绍了公平调度的概念，这个概念来自排队理论。在内核2.6.23版本中，内核开发者鼓励人们使用&lt;strong&gt;Completely Fair Scheduler(CFS)&lt;/strong&gt; 代替O(1)调度器。&lt;/p&gt;

&lt;p&gt;这个章节讨论一些调度器设计的基础知识，并且会介绍这些知识是如何应用在CFS调度器中的。同时也会介绍O(1)调度器因为它的实现是经典的unix进程调度模型。&lt;/p&gt;

&lt;h2 id=&quot;策略&quot;&gt;策略&lt;/h2&gt;
&lt;p&gt;策略是调度器的行为，用来决定什么时候哪个进程需要运行(原文是Policy is the behavior of the scheduler that determines what runs when.  感觉翻译的不是很准确!!)&lt;/p&gt;

&lt;h3 id=&quot;io密集型进程&quot;&gt;IO密集型进程&lt;/h3&gt;
&lt;p&gt;进程可以划分为IO密集型和处理器（计算）密集型。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;IO密集型进程花费大量的时间在提交IO请求和等待IO请求完成上。这样的进程只有很小的一段时间处于运行状态，因为大部分时间处于阻塞在IO的状态上。
    &lt;ul&gt;
      &lt;li&gt;I/O是一个统称，表示了任何的可能会引发阻塞的资源，比如键盘输入或者网络I/O，而不仅仅狭义的指磁盘I/0。多数的GUI应用程序都是I/O密集型的，即使这些程序不从磁盘读取任何数据，它们花费大量的时间用于等待用户通过鼠标或者键盘进行交互。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;计算密集型花费大量的时间用于执行代码。它们倾向于一直运行直到它们完成所有的计算，不会经常的阻塞在I/O上。系统不需要经常调度这些进程，但是需要在每次调度的时候多分配一些时间片。
    &lt;ul&gt;
      &lt;li&gt;计算密集型的进程包括：一个执行死循环的程序，ssh-keygen(加密的程序), 或者MATLAB(可能同于大量矩阵运算)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I/O密集型和计算密集型相互之间是不排斥的，一个进程可能同时处于这两种状态:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;X Window server既是计算密集型也是I/0密集型&lt;/li&gt;
  &lt;li&gt;word processor(文本处理器？)是I/O密集型的，但是在某一段时间有可能变为计算密集型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;系统的调度策略试图满足两个看似矛盾的目标:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;更快的进程响应（低延迟）&lt;/li&gt;
  &lt;li&gt;最大的系统利用率（高吞吐）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相对于计算密集型程序，系统更倾向于I/O密集型程序&lt;/p&gt;

&lt;p&gt;调度器需要使用复杂的算法决定哪个进程是最值得调度的，而不是将高优先级进程和低优先级平等对待，丧失公平性。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;unix系统的调度策略更倾向于I/O密集型进程，这样可以提供更好的响应时间&lt;/li&gt;
  &lt;li&gt;linux，旨在提供更好的交互和更好的桌面性能，因此相比于计算密集型更倾向于I/0密集型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;进程优先级&quot;&gt;进程优先级&lt;/h3&gt;
&lt;p&gt;基于进程优先级的调度是常用的调度算法，这种算法不仅仅在Linux上实现。这种算法决定了高优先级的进程先于低优先级的进程运行，同优先级的进程通过round-robin进行调度。在某些系统上，高优先级的进程获得更多的时间片。有高优先级以及剩余时间片的进程通常情况优先运行。&lt;/p&gt;

&lt;h4 id=&quot;nice值和实时优先级&quot;&gt;nice值和实时优先级&lt;/h4&gt;

&lt;p&gt;linux内核实现了两类优先级:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;nice值(-20到+19的整数，默认为0)是所有unix系统标准的优先级区间:
    &lt;ul&gt;
      &lt;li&gt;拥有低nice值得进程拥有更高的优先级，并且占有更多的处理器资源。&lt;/li&gt;
      &lt;li&gt;在Linux系统中，nice值影响时间片的分配比例。在其他类unix系统中（比如Mac OSX），nice值影响固定时间片的分配。&lt;/li&gt;
      &lt;li&gt;通过&lt;strong&gt;ps -el&lt;/strong&gt; 命令可以看到各个进程的nic值。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实时优先级（可配的值，默认区间为0到99）
    &lt;ul&gt;
      &lt;li&gt;高实时优先级的进程意味着更高的优先级&lt;/li&gt;
      &lt;li&gt;所有实时进程的优先级都高于普通进程&lt;/li&gt;
      &lt;li&gt;linux按照unix的标准(尤其是POSIX.1b)来实现的实时优先级&lt;/li&gt;
      &lt;li&gt;通过&lt;strong&gt;ps -eo state,uid,pid,ppid,rtprio,time,comm&lt;/strong&gt; 命令来查看进程以及进程对应的优先级。”-“代表进程不是实时进程。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;时间片&quot;&gt;时间片&lt;/h3&gt;
&lt;p&gt;时间片表示进程在被抢占前可以运行的时间。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个过长的时间片会导致系统的交互变差&lt;/li&gt;
  &lt;li&gt;一个过短的时间片会导致过多的时间浪费在进程切换上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I/O密集型和计算密集型之间的冲突:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I/O密集型不需要过多的时间片，尽管他们需要经常运行&lt;/li&gt;
  &lt;li&gt;计算密集型需要更长的时间片（用来保持缓存的热度）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;linux的时间片&quot;&gt;linux的时间片&lt;/h4&gt;
&lt;p&gt;linux的CFS调度器不直接分配时间片给进程，而是分配给进程相应比例的处理器资源。进程分配的处理器时间是一个系统负载有关的函数。所分派的比例进一步被各个进程的nice值影响。nice起了权重的作用，用来该表进程所占用的处理器比例。拥有高nice值得进程会获得较低的权重，相应的也获得较低的处理器比例。&lt;/p&gt;

&lt;p&gt;在使用CFS的情况下，决定一个进程是否应该立刻运行的条件是这个新的进程消费了多少处理器比例。如果当前进程遇到了一个消费比例更低的进程，则需要立刻让出处理器。&lt;/p&gt;

&lt;h3 id=&quot;调度策略实例&quot;&gt;调度策略实例&lt;/h3&gt;
&lt;p&gt;假设有两个可运行的进程: 一个时文本编辑器(I/O密集型)和一个视频编码器(计算密集型)
理想状态下调度器会给文本编辑器更高的处理器占用比，因为它是交互性的。我们希望可以达到如下两个目标:
  1. 我们希望文本编辑器有大量的处理器时间可供使用，这不是因为它需要这么多资源，而是我们希望在它需要处理器资源的时候能够有可用的处理器资源。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;我们希望在文本编辑器被唤醒的时候能够抢占视频编码器。这可以为文本编辑器提供更好的响应时间。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;上面的两个目标是如何实现的&quot;&gt;上面的两个目标是如何实现的&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;linux保证文本编辑器拥有一定比例的处理器资源，而不是分配固定的时间片给进程。如果只有两个进程，并且进程的nice值相同，那么保证了每个进程占用了处理的50%。因为文本编辑器更多的时间处于阻塞状态，所以使用的比例远不到50%。相反视频处理器允许使用超过50%，这样可以使得它尽快的完成编码工作。&lt;/li&gt;
  &lt;li&gt;当文本编辑器被唤醒的时候，CPS注意到文本编辑器被分配了50%的处理器资源，但是使用的却远不到。为了尽量保持所有的进程公平分享处理器，所以它会挂起视频编码器，让文本编辑器运行。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;linux调度算法&quot;&gt;linux调度算法&lt;/h2&gt;

&lt;h3 id=&quot;调度类型&quot;&gt;调度类型&lt;/h3&gt;
&lt;p&gt;linux的调度器是模块化的，启动不同的算法来调度不同类型的进程。这些模块被称作&lt;strong&gt;scheduler classes&lt;/strong&gt;。调度器的基础代码在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched.c&lt;/code&gt;中，它按照优先级遍历各个scheduler class。有可运行进程的最高优先级的scheduler class胜出，由它来选择出接下来运行的进程。&lt;/p&gt;

&lt;p&gt;CFS调度器是scheduler class的一种，用于普通进程，在linux中称作&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_NORMAL&lt;/code&gt;。CFS定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched_fair.c&lt;/code&gt;中。这一小节的其他内容会讨论CFS算法。&lt;/p&gt;

&lt;h3 id=&quot;unix系统中的进程调度&quot;&gt;unix系统中的进程调度&lt;/h3&gt;

&lt;p&gt;为了讨论公平调度，我们首先需要介绍下传统的unix系统是如何进行进程调度的。&lt;/p&gt;

&lt;p&gt;现代进程调度器有两个通用的概念：进程优先级和时间片。拥有高优先级的进程会运行的更频繁，并且获得更多的时间片。在unix系统中，优先级以nice的形式呈现。这样做导致了几个问题:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;将nice值映射为时间片需要知道每个nice值需要分配多少固定的时间片，这会导致优先级翻转的情况、&lt;/li&gt;
  &lt;li&gt;用相对的nice值会有不同的效果，这取决于初始值。&lt;/li&gt;
  &lt;li&gt;绝对的时间片必须是timer tick的整数倍，这会导致一些问题&lt;/li&gt;
  &lt;li&gt;在对交互式进程做了优化的基于优先级的调度器中处理被唤醒的进程可能会导致调度器给某个进程分配了不公平的处理器时间。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CFS采用的办法是激进的，它重新思考了时间片的分配方式: 不直接分配时间片，而是分配一定比例的处理器资源。&lt;/p&gt;

&lt;h3 id=&quot;公平调度&quot;&gt;公平调度&lt;/h3&gt;

&lt;p&gt;CFS基于一个简单的概念: 假设系统有一个理想的，完美的多任务处理器，在这个基础上对进程调度进行建模。在这样的系统上，每个进程拥有1/n的处理器资源，n是当前可运行进程的数量，系统每隔非常小的一段时间(接近于无限小)调度一次进程，这样无论在任何可衡量的时间段内，每个进程都运行了基本上相同的时间。&lt;/p&gt;

&lt;p&gt;以无限小的时间运行进程是低效的；挂起一个进程然后切换到另外一个进程是有代价的:进程切换的开销以及对缓存的影响。CFS给每个进程一段时间让其运行，然后选择下一个运行的最少的进程。CFS不是给进程分配时间片，而是通过和当前进程数相关联的的函数计算进程应该运行多长时间。CFS通过nice值衡量进程占用的处理器比例，而不是通过nice值计算时间片。&lt;/p&gt;

&lt;p&gt;每个进程运行一段时间，这个时间是按照其权重除以所有进程权重总和后得到的比例分配的。CFS设置了一个接近”infinitely small”的值，这个值称作&lt;strong&gt;targeted latency&lt;/strong&gt;。targeted latency越小，系统的交互性越好，越接近完美的多任务系统，但是进程切换的开销越大，系统的吞吐量越低。CFS给每个进程分配的时间设置了一个最低值，叫做minimum ranularty(默认为1ms)。即使可运行的进程数量接近于无数，那进程每次运行的时间至少可以达到1ms，保证不会出现过高的进程切换开销。&lt;/p&gt;

&lt;p&gt;为了更好地理解nice值是如何影响处理器比例的，看一下下面的例子:
有两个可运行的进程，它们拥有不同的nice值。一个进程的nice值是默认的0，另一个nice值是5.在这种情况下，nice值为5的进程所占用的处理器比例为nice值为0的进程的1/3.也就是说如果我们设置targeted latency为20ms的话，两个进程分别可以获取到15ms和5ms的处理器时间。通常情况下，一个进程的nice值和其他进程的nice值之间的相对区别直接影响了其可以获得到的处理器比例。&lt;/p&gt;

&lt;p&gt;注释1: &lt;a href=&quot;https://stackoverflow.com/questions/21391176/linux-kernel-targeted-latency-vs-minimum-granularity&quot;&gt;stackoverflow&lt;/a&gt;上有人解释了targeted latency的作用。在targeted latancy时间内，每个进程至少需要被调度到一次。&lt;/p&gt;

&lt;p&gt;注释2: 上面的例子中提到nice值为5的进程所能够拥有的处理器比例为nice值为0的进程的1/3，这需要参见下面的 &lt;strong&gt;nice值到权重的映射&lt;/strong&gt;以及&lt;strong&gt;虚拟运行时间的计算&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;linux的调度实现&quot;&gt;linux的调度实现&lt;/h2&gt;

&lt;p&gt;CFS的实现在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched_fair.c&lt;/code&gt;中。下面的内容会讨论CFS的四个部分:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;时间统计&lt;/li&gt;
  &lt;li&gt;进程选择&lt;/li&gt;
  &lt;li&gt;调度入口&lt;/li&gt;
  &lt;li&gt;睡眠和唤醒&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;时间统计&quot;&gt;时间统计&lt;/h3&gt;

&lt;p&gt;进度调度器需要统计各个进程的运行时间。在系统时钟的每次嘀嗒，进程的可用时间片会减少，减少的值为时钟周期。当时间片变为0的时候，系统挂起然后选择另一个时间片非0的可运行进程运行。&lt;/p&gt;

&lt;h4 id=&quot;调度结构体&quot;&gt;调度结构体&lt;/h4&gt;

&lt;p&gt;CFS没有时间片概念，但是它必须跟踪每个进程运行的时间。&lt;/p&gt;

&lt;p&gt;CFS使用&lt;strong&gt;scheduler entity struct&lt;/strong&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;struct sched_entity&lt;/code&gt;，定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;linux/sched.h&amp;gt;&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/include/linux/sched.h#L1090&quot;&gt;include/linux/sched.h#L1090&lt;/a&gt;)中，用于跟踪进程统计:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_weight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_exec_runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_sum_exec_runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg_overlap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg_wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* many stat variables elided, enabled only if CONFIG_SCHEDSTATS is set */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调度结构体嵌在进程的描述符中，&lt;code class=&quot;highlighter-rouge&quot;&gt;struct task_struct&lt;/code&gt;中，对应的名字是&lt;code class=&quot;highlighter-rouge&quot;&gt;se&lt;/code&gt; (&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/include/linux/sched.h#L1188&quot;&gt;include/linux/sched.h#L1188&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;nice值到权重的映射&quot;&gt;nice值到权重的映射&lt;/h4&gt;

&lt;p&gt;nice值到权重的映射定义在常量数组&lt;code class=&quot;highlighter-rouge&quot;&gt;prio_to_weight&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched.c#L1356&quot;&gt;kernel/sched.c#L1362&lt;/a&gt;)中。权重的值约等于&lt;code class=&quot;highlighter-rouge&quot;&gt;1024/(1.25)^(nice)&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prio_to_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* -20 */&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;88761&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;71755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;56483&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;46273&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;36291&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* -15 */&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;29154&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;23254&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;18705&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;14949&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;11916&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/* -10 */&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;9548&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;7620&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;6100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;4904&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;3906&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*  -5 */&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;3121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;2501&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1991&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1586&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1277&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*   0 */&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;820&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;655&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;526&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;423&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*   5 */&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;335&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;272&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;215&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;172&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*  10 */&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*  15 */&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;虚拟运行时间&quot;&gt;虚拟运行时间&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt; 用于存储进程的虚拟运行时间，这个值是进程的实际运行时间和总的进程数通过运算得到的。虚拟运行时间的单位是纳秒，因此和系统时钟解耦了。因为处理器不能完美的处理多任务，并且我们必须成功的运行每个进程，CFS使用&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt; 来衡量每个进程已经运行了多长时间以及每个进程还可以运行多长时间。&lt;/p&gt;

&lt;p&gt;函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;update_curr()&lt;/code&gt;，定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernal/sched_fair.c&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L518&quot;&gt;kernel/sched_fair.c#L518&lt;/a&gt;)中，用于管理统计信息:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rq_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Get the amount of time the current task was running
     * since the last time we changed load (this cannot
     * overflow on 32 bits):
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;__update_curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity_is_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curtask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;trace_sched_stat_runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curtask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cpuacct_charge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curtask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;account_group_exec_runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curtask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update_curr()&lt;/code&gt; 计算当前进程的运行时间，并且存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;delta_exec&lt;/code&gt;中。然后传递运行时间给&lt;code class=&quot;highlighter-rouge&quot;&gt;__update_curr()&lt;/code&gt;，该函数会将运行时间和当前进程数做一系列运算做加权处理。当前进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;会加上这个处理后的加权值:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Update the current task's runtime statistics. Skip current tasks that
 * are not in our scheduling class.
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;__update_curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec_weighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;schedstat_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum_exec_runtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedstat_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_clock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delta_exec_weighted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc_delta_fair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vruntime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec_weighted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_min_vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;update_curr()&lt;/code&gt; 方法被系统的定时器周期的调用。在这种情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;代表了进程准确的运行时间并且用来表明哪个进程会被调度占用处理器。&lt;/p&gt;

&lt;h4 id=&quot;calc_delta_fair函数&quot;&gt;calc_delta_fair函数&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L431&quot;&gt;kernel/sched_fair.c#L431&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * delta /= w
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;calc_delta_fair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NICE_0_LOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc_delta_mine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NICE_0_LOAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched.c#L1294&quot;&gt;kernel/sched.c#L1300&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * delta *= weight / lw
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;calc_delta_mine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITS_PER_LONG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WMULT_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_weight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WMULT_CONST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta_exec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
     * Check whether we'd overflow the 64-bit multiplication:
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WMULT_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SRR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SRR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WMULT_SHIFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;WMULT_SHIFT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SRR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inv_weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WMULT_SHIFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LONG_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码可以归纳为:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;delta_exec_weighted = delta_exec * NICE_0_LOAD / se-&amp;gt;load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/17776451&quot;&gt;Explanation of the calc_delta_mine function&lt;/a&gt;中有详细的探讨。&lt;/p&gt;

&lt;h3 id=&quot;进程选择&quot;&gt;进程选择&lt;/h3&gt;

&lt;p&gt;CFS通过一个简单的规则来平衡各进程的虚拟运行时间: 当需要选择下一个运行的进程的时候，调度器选择&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;最小的进程。&lt;/p&gt;

&lt;p&gt;CFS使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&quot;&gt;红黑树&lt;/a&gt;来管理进程列表，并且高效的找到有最小&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;的进程。红黑树在linux称为rbtree(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/include/linux/rbtree.h&quot;&gt;include/linux/rbtree.h&lt;/a&gt;，&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/lib/rbtree.c&quot;&gt;lib/rbtree.c&lt;/a&gt;)，是一种自平衡的二叉搜索树。红黑树的搜索复杂度为O(logn)。&lt;/p&gt;

&lt;h4 id=&quot;选择下一个任务&quot;&gt;选择下一个任务&lt;/h4&gt;

&lt;p&gt;CFS选择的下一个可运行的进程，拥有最小的&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;，在红黑树的最左节点。如果沿着红黑树的根节点，向下到左节点，然后一直沿着左节点向下走就可以找到最小&lt;code class=&quot;highlighter-rouge&quot;&gt;vruntime&lt;/code&gt;的节点。CFS的进程选择算法可以总结为寻找红黑树最左节点的过程。&lt;/p&gt;

&lt;p&gt;寻找下一个运行任务的函数为&lt;code class=&quot;highlighter-rouge&quot;&gt;__pick_next_entity()&lt;/code&gt;，定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched_fair.c&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L377&quot;&gt;kernel/sched_fair.c#L377&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;__pick_next_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_leftmost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到&lt;code class=&quot;highlighter-rouge&quot;&gt;__pick_next_entity()&lt;/code&gt;实际上并没有遍历树来寻找最左节点，因为最左节点缓存在&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_leftmost&lt;/code&gt;中，尽管遍历树的复杂度为O(logn)已经足够高效了。&lt;/p&gt;

&lt;p&gt;函数返回的值就是下一个要运行的进程。如果函数返回NULL，表示没有可运行的进程，CFS会调度idle进程。&lt;/p&gt;

&lt;h4 id=&quot;添加进程到红黑树&quot;&gt;添加进程到红黑树&lt;/h4&gt;

&lt;p&gt;CFS添加进程到红黑树，并且缓存最左的节点，当一个进程变为可运行状态或者通过&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;刚刚被创建的时候。这个操作是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue_entity()&lt;/code&gt;完成de:
&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L773&quot;&gt;kernel/sched_fair.c#L773&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;enqueue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
     * Update the normalized vruntime before updating min_vruntime
     * through callig update_curr().
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENQUEUE_WAKEUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENQUEUE_MIGRATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vruntime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Update run-time statistics of the 'current'.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account_entity_enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENQUEUE_WAKEUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;place_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;enqueue_sleeper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;update_stats_enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_spread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__enqueue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个方法更新了runtime和其它统计信息，然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;__enqueue_entity()&lt;/code&gt;来完成繁重的插入和平衡二叉树工作。
&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L328&quot;&gt;kernel/sched_fair.c#L328&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Enqueue an entity into the rb-tree:
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__enqueue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftmost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Find the right place in the rbtree:
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
         * We dont care about collisions. Nodes with
         * the same key stay together.
         */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;leftmost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Maintain a cache of leftmost tree entries (it is frequently
     * used):
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftmost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_leftmost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rb_link_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rb_insert_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数在while()循环中遍历树查找合适的插入位置。如果插入的节点小于遍历的节点，则会从当前遍历节点的左子节点开始寻找，否则向右寻找。如果向右寻找，哪怕只有一次，就可以判断出新的节点不会成为最新的最左节点，所以设置leftmost为0.如果一直向左寻找，leftmost保持1，并且产生新的leftmost节点，然后缓存到&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_leftmost&lt;/code&gt;中。当跳出循环的时候，方法在parent节点上调用&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_link_node()&lt;/code&gt;，使得新插入的节点为自己点。方法&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_insert_color()&lt;/code&gt;更新树的自平衡属性。&lt;/p&gt;

&lt;h4 id=&quot;在二叉树中移除进程&quot;&gt;在二叉树中移除进程&lt;/h4&gt;

&lt;p&gt;当进程阻塞或者终止的是偶，CFS将进程从红黑树中移除:
&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_fair.c#L815&quot;&gt;kernel/sched_fair.c#L815&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dequeue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*
     * Update run-time statistics of the 'current'.
     */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;update_stats_dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clear_buddies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__dequeue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;account_entity_dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_min_vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Normalize the entity after updating the min_vruntime because the
     * update can refer to the -&amp;gt;curr item and we need to reflect this
     * movement in our normalized position.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vruntime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_vruntime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;类似的，真实的工作由另一个方法完成，这个方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;__dequeue_entity()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__dequeue_entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_leftmost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_leftmost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rb_erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;se&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs_rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在红黑树中移除进程更简单一些，因为红黑树的实现提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_erase()&lt;/code&gt;方法来完成所有工作。函数的其他部分用于更新&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_leftmost&lt;/code&gt;缓存。如果移除的进程是leftmost节点，那么函数会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;rb_next()&lt;/code&gt;来查找下一个节点，然后成为新的leftmost节点。&lt;/p&gt;

&lt;h3 id=&quot;调度器入口&quot;&gt;调度器入口&lt;/h3&gt;

&lt;p&gt;调度器的入口在方法&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;中，该方法定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched.c&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched.c#L3698&quot;&gt;kernel/sched.c#L3701&lt;/a&gt;)中。该方法调用进程调度器，并且决定哪个进程需要被调度然后运行这个进程。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;对scheduler classes是通用的。它查找有可运行进程的最高优先级的调度器，然后使用该调度器查找下一个运行的进程。因此, &lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;的实现是比较简单的。该函数唯一比较重要的部分是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;pick_next_task*()&lt;/code&gt;方法，该方法定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched.c&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched.c#L3667&quot;&gt;kernel/sched.c#L3670&lt;/a&gt;)，该方法用于遍历每个scheduler class，从高优先级调度器中选择出最高优先级的进程。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
 * Pick up the highest-prio task:
 */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;pick_next_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * Optimization: we know that if all tasks are in
     * the fair class we can call that function directly:
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nr_running&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nr_running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fair_sched_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pick_next_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;likely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sched_class_highest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pick_next_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*
         * Will never be NULL as the idle class always
         * returns a non-NULL p:
         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;该函数的最开始位置有一个优化点。CFS是普通进程的调度器，并且系统大多数运行的都是普通进程，如果系统可运行的进程数和CFS可运行进程数相同，那么先从CFS中获取可运行进程作为优化，这样就不需要遍历所有调度器了。&lt;/p&gt;

&lt;p&gt;pick_next_task的核心在for循环内，从最高优先级开始按照从高到低遍历每个调度器。每个调度器都实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;pick_next_task()&lt;/code&gt;方法，该方法返回了指向下一个运行进程的指针，如果没有可运行的进程该方法则返回NULL。第一个返回的非NULL的指针指向的进程作为下一个可运行进程。CFS实现的&lt;code class=&quot;highlighter-rouge&quot;&gt;pick_next_task()&lt;/code&gt;方法叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;pick_next_entity()&lt;/code&gt;，该方法调用&lt;code class=&quot;highlighter-rouge&quot;&gt;__pick_next_entity()&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;fair_sched_class-scheduler-class&quot;&gt;fair_sched_class scheduler class&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fair_sched_class&lt;/code&gt;是定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched_fair.c&lt;/code&gt;中的结构体。&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched_fair.c&lt;/code&gt;被&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/sched.c&lt;/code&gt;所引用，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;fair_sched_class&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;pick_next_task&lt;/code&gt; 中是可用的。&lt;/p&gt;

&lt;h3 id=&quot;睡眠和唤醒&quot;&gt;睡眠和唤醒&lt;/h3&gt;

&lt;p&gt;当进程睡眠的时候，处于一种特殊的非运行状态。
当进程遇到下面的情况时会进入到睡眠状态:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;睡眠固定的时间&lt;/li&gt;
  &lt;li&gt;等待文件I/O&lt;/li&gt;
  &lt;li&gt;等待其他硬件事件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个进程可能被动进入到睡眠状态如果在内核中遇到竞争的信号量。&lt;/p&gt;

&lt;p&gt;无论什么情况导致进程睡眠，内核对于睡眠的处理都是相同的。进程会做如下的处理:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;标记自己为sleeping&lt;/li&gt;
  &lt;li&gt;把自己放到等待队列上&lt;/li&gt;
  &lt;li&gt;把自己可运行的红黑树上移除&lt;/li&gt;
  &lt;li&gt;调用schedule()方法选择一个新的进程来执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当进程被唤醒的时候过程是相反的: 进程被设置为可运行，从等待队列移除，重新添加到可运行的红黑树中&lt;/p&gt;

&lt;p&gt;下面的两个状态和睡眠相关:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_INTERRUPTIBLE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_UNINTERRUPTIBLE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这二者的唯一区别是&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_UNINTERRUPTIBLE&lt;/code&gt;忽略信号，而处于&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_INTERRUPTIBLE&lt;/code&gt;的进程可能提前被唤醒并且对信号做出响应。二者相同的是都位于等待队列中，等待事件的发生。&lt;/p&gt;

&lt;h4 id=&quot;等待队列&quot;&gt;等待队列&lt;/h4&gt;

&lt;p&gt;睡眠是通过等待队列进行处理的。一个等待队列由等某个事件发生的进程组成。&lt;/p&gt;

&lt;p&gt;等待对垒在内核中的结构为&lt;code class=&quot;highlighter-rouge&quot;&gt;wake_queue_head_t&lt;/code&gt;。等待队列是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;DECLARE_WAITQUEUE&lt;/code&gt;静态创建或者通过&lt;code class=&quot;highlighter-rouge&quot;&gt;init_waitqueue_head()&lt;/code&gt;动态创建。进程将他们自己放置到等待队列中并且标记自己为不可运行。当和等待队列关联的事件发生的时候，队列中的进程被唤醒。&lt;/p&gt;

&lt;p&gt;正确的实现睡眠和唤醒，以及避免条件竞争是很重要的。否则，可能在condition变为true之后进入到睡眠，这样进程可能无限期的睡眠下去。因此，内核推荐的睡眠函数在实现上有一些复杂:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* `q' is the wait queue we wish to sleep on */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFINE_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;add_wait_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* condition is the event that we are waiting for */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prepare_to_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_INTERRUPTIBLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* handle signal */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;finish_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进程执行下面的步骤来将自己添加到等待队列中:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;通过宏&lt;code class=&quot;highlighter-rouge&quot;&gt;DEFINE_WAIT()&lt;/code&gt;创建等待队列项&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;add_wait_queue&lt;/code&gt;将自己添加到等待队列中。当进程等待的事件到来时，队列会唤醒进程。当然，这需要调用wake_up方法&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;prepare_to_wait()&lt;/code&gt;方法将进程的状态设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_INTERRUPTIBLE&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_UNINTERRUPTIBLE&lt;/code&gt;。在必要的情况下，这个方法也会将任务添加回等待队列。&lt;/li&gt;
  &lt;li&gt;当进程状态设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_INTERRUPTIBLE&lt;/code&gt;的时候，信号可以唤醒进程。这种情况叫做伪唤醒。&lt;/li&gt;
  &lt;li&gt;当进程被唤醒的时候，它重新检查状态是否是true。如果是，则退出循环。否则继续调用schedule()重复过程。&lt;/li&gt;
  &lt;li&gt;当状态为true的时候，进程设置自己的状态为&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_RUNNING&lt;/code&gt;，然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;finish_wait()&lt;/code&gt;将自己从等待队列中移除&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果在进程进入睡眠前，事件已经发生了，那么循环会立刻终止，进程则不会进入到睡眠状态。内核进场需要在循环体内处理其他任务。比如，在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;之前可能需要释放锁，然后继续获取锁来处理其他任务。&lt;/p&gt;

&lt;p&gt;方法&lt;code class=&quot;highlighter-rouge&quot;&gt;inotify_read()&lt;/code&gt;定义在&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/fs/notify/inotify/inotify_user.c#L229&quot;&gt;fs/notify/inotify/inotify_user.c&lt;/a&gt;，主要用于读取inotify文件，是一个使用等待队列的例子:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inotify_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loff_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsnotify_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fsnotify_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEFINE_WAIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prepare_to_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification_waitq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TASK_INTERRUPTIBLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_one_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PTR_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IS_ERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy_event_to_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fsnotify_put_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kevent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EAGAIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f_flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_NONBLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EINTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal_pending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;finish_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notification_waitq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的函数有一些值得关注的地方:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在while循环体内，检查条件是否发生，而不是在while自身检查，因为条件的检查比较复杂并且需要获取锁。&lt;/li&gt;
  &lt;li&gt;循环通过关键词break终止&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;唤醒&quot;&gt;唤醒&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wake_up()&lt;/code&gt; 方法唤醒某个等待队列中的所有进程。它主要做了下面几件事情:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;try_to_wake_up()&lt;/code&gt;，该方法将进程的状态设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;TASK_RUNNING&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;enqueue_task()&lt;/code&gt;将任务添加到红黑树中&lt;/li&gt;
  &lt;li&gt;如果被唤醒的进程的优先级高于当前执行任务的优先级，则设置&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位。使得事件发生的代码通常会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wake_up()&lt;/code&gt;方法。
    &lt;ul&gt;
      &lt;li&gt;比如，当从磁盘读取的数据到达的时候，VFS(虚拟文件系统)在等待这个数据的等待队列上调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wake_up()&lt;/code&gt;方法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为存在伪唤醒，所以一个进程被唤醒并不意味着一定存在事件发生。在循环中一定要处理睡眠，保证进程等待的事件实际上真的发生了。下面的图描述了进程的几个调度状态。
&lt;img src=&quot;https://notes.shichao.io/lkd/figure_4.1_600.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_4.1_600.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;抢占和上下文切换&quot;&gt;抢占和上下文切换&lt;/h2&gt;

&lt;p&gt;上下文切换(从一个进程切换到另一个进程)通过&lt;code class=&quot;highlighter-rouge&quot;&gt;context_switch()&lt;/code&gt;方法处理，该方法定义在&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched.c#L2905&quot;&gt;kernel/sched.c&lt;/a&gt;中。该方法被&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;调用，当一个新的进程被选择运行的时候。它主要做了下面几件事情:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;switch_mm&lt;/code&gt;，来切换虚拟内存映射。该方法定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asm/mmu_context.h&amp;gt;&lt;/code&gt;中。&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;switch_to&lt;/code&gt;方法，将处理器状态从之前的进程切换到现在的进程。这包括保存和恢复栈信息、寄存器和其他架构相关的状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;need_resched&quot;&gt;need_resched&lt;/h3&gt;

&lt;p&gt;内核必须知道何时调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;方法，如果仅仅是代码自行调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;方法，那么用户态的进程可能永远执行下去。&lt;/p&gt;

&lt;p&gt;内核提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标准位用来表明需要进行重调度。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scheduler_tick()&lt;/code&gt;可能会设置该标志位&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;try_to_wake_up()&lt;/code&gt;可能会设置该标志位，如果被唤醒的进程优先级高于当前运行的进程的话。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内核会检查该标志位，如果被设置了，则调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;方法切换到新的进程运行。这个标志位用于通知内核尽快的进行重调度因为有另外的进程渴望运行。&lt;/p&gt;

&lt;p&gt;在从系统调用回到用户态或者从中断恢复的时候，会检查&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位。如果设置了，内核会调用进程调度器。&lt;/p&gt;

&lt;p&gt;下面的表列出了访问或者修改&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;的方法:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Purpose&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;set_tsk_need_resched()&lt;/td&gt;
      &lt;td&gt;设置某个进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;clear_tsk_need_resched()&lt;/td&gt;
      &lt;td&gt;清除某个进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;need_resched()&lt;/td&gt;
      &lt;td&gt;测试&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位；如果设置了则返回true；否则返回false&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这个标志位是属于进程的，而不是简单的全局标志位，因为访问进程描述符里面的数据要比访问全局数据要快。因为历史原因在内核2.2版本之前，该标志位是全局的，在内核2.4版本之后该标志位位于&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;中。在内核2.6版本中，该标志位被挪到了&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;中，仅仅在所有标志位中占用一个bit。&lt;/p&gt;

&lt;h3 id=&quot;用户抢占&quot;&gt;用户抢占&lt;/h3&gt;
&lt;p&gt;当内核返回到用户空间之前，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;被设置，内核会调用进程调度器，这时候就发生了用户抢占。如果内核正在返回用户空间，它直到目前处于安全状态。换句话说，它可以继续执行当前的任务，或者切换到新的任务执行。&lt;/p&gt;

&lt;p&gt;当内核准备从系统调用或者中断处理返回到用户空间的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;标志位会被检查。如果该标志位被设置了，那么调度器会被调用然后选择出一个新的进程来运行。从系统调用或者从中断返回的返回路径和体系结构相关，通常在&lt;code class=&quot;highlighter-rouge&quot;&gt;entry.S&lt;/code&gt;中实现。&lt;/p&gt;

&lt;p&gt;总结下来，用户抢占发生在下面的两个情况:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;从系统调用返回到用户空间&lt;/li&gt;
  &lt;li&gt;从中断处理返回到用户空间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;内核抢占&quot;&gt;内核抢占&lt;/h3&gt;

&lt;p&gt;在非抢占的内核汇总，内核代码通常一直执行直到执行完成。这是因为调度器通常不能调度一个正在运行内核代码的进程:内核代码是不可抢占的。内核代码会一直运行直到结束或者阻塞。&lt;/p&gt;

&lt;p&gt;在linux内核2.6版本之后，linux内核变为完全可抢占的。在进程任意的位置都有可能发生抢占，只要内核的状态处于安全的重调度状态。&lt;/p&gt;

&lt;p&gt;内核可以抢占一个进程只要内核没有持有锁。因为内核是多进程安全的，只要当前进程没有持有锁，那么正在运行的代码就是可重入的并且可以被抢占。&lt;/p&gt;

&lt;h4 id=&quot;抢占计数器-preempt_count&quot;&gt;抢占计数器 preempt_count&lt;/h4&gt;

&lt;p&gt;为了支持内核抢占，抢占计数器被添加到thread_info中。这个计数器初始的时候是0，每当获得锁的时候都会加1.从中断回来的时候，如果是回到内核空间，那么内核会检查&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;preempt_count&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;need_resched&lt;/code&gt;被设置了并且&lt;code class=&quot;highlighter-rouge&quot;&gt;preempt_count&lt;/code&gt;是0，同时有另一个优先级更高的进程需要运行，那么当前进程会被抢占。&lt;/li&gt;
  &lt;li&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;preempt_count&lt;/code&gt;不为0，那么表示当前进程持有锁了。重调度是不安全的。在这种况下，中断会照常返回继续执行当前的任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开启或者禁止内核抢占在某些情况下被内核代码用到。&lt;/p&gt;

&lt;h4 id=&quot;明确的内核抢占&quot;&gt;明确的内核抢占&lt;/h4&gt;

&lt;p&gt;内核抢占也可能显示的发生，当内核代码遇到下面的情况时:L&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;阻塞&lt;/li&gt;
  &lt;li&gt;显示调用schedule()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种类型的抢占通常情况下被支持的，因为不需要额外的逻辑保证内核处于安全的可抢占状态。这是基于显示调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;的代码直到它目前处于安全的可调度的。&lt;/p&gt;

&lt;p&gt;总结起来，内核抢占会发生在下面的情况:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;中断处理退出，回到内核空间之前&lt;/li&gt;
  &lt;li&gt;当内核代码变得可抢占&lt;/li&gt;
  &lt;li&gt;内核代码显示调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;内核代码阻塞(简介调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实时调度策略&quot;&gt;实时调度策略&lt;/h2&gt;

&lt;p&gt;Linux系统提供了两种实时调度策略:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIRO&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_RR&lt;/code&gt;。通常情况下，非实时调度采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_NORMAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在调度框架中，这些实时策略不是通过CFS来管理的，而是通过一个特殊的实时调度器来完成，这个调度器定义在&lt;a href=&quot;https://github.com/shichao-an/linux/blob/v2.6.34/kernel/sched_rt.c&quot;&gt;kernel/sched_rt.c&lt;/a&gt;中。&lt;/p&gt;

&lt;h3 id=&quot;sched_fifo策略&quot;&gt;SCHED_FIFO策略&lt;/h3&gt;

&lt;p&gt;该策略简单来说就是先进先出，而不参考时间片信息。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;一个可运行的&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;进程通常会比任何处于&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_NORMAL&lt;/code&gt;的进程先运行&lt;/li&gt;
  &lt;li&gt;当一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;进程变得可运行的是哦户，它会一直运行直到阻塞或者显示让出处理器；它没有时间片，并且可以无限期的运行。&lt;/li&gt;
  &lt;li&gt;只有更高优先的&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_RR&lt;/code&gt;进程可以抢占一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;进程&lt;/li&gt;
  &lt;li&gt;多个有相同优先级的&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;进程采用round-robin的方式进行调用，但是只有它们自己才能让出处理器&lt;/li&gt;
  &lt;li&gt;如果一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;进程处于可运行状态，其他低优先级的进程都不能运行直到这个进程变得不可运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sched_rr策略&quot;&gt;SCHED_RR策略&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_RR&lt;/code&gt; 策略和&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;基本上一致，除了前者会一直运行直到时间片到期。也就是说，&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_RR&lt;/code&gt;是有时间片的&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIFO&lt;/code&gt;。它也是一个实时的，基于round-robin调度的算法。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当一个&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_RR&lt;/code&gt;进程时间片技术的时候，任何和他相同优先级的进程会被调度，策略是round-robin。时间片只在相同优先级的进程中有用。&lt;/li&gt;
  &lt;li&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_FIRO&lt;/code&gt;相似，高优先级的进程通常可以抢占低优先级的进程。而低优先级的进程不可以抢占高优先级的进程，尽管它的时间片已经用完。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;实时调度策略也实现了静态优先级。内核不为实时任务计算动态优先级。这保证了高优先级的进程通常能够抢占低优先级的进程。&lt;/p&gt;

&lt;h3 id=&quot;硬实时和软实时&quot;&gt;硬实时和软实时&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;软实时意味着内核尝试在时间截止时调度应用，但是不保证一定能够成功&lt;/li&gt;
  &lt;li&gt;硬实时系统保证完成任何调度在指定的时间内。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;linux提供了软实时策略。Linux不保证调度实时任务的能力。除了没有保证硬实时的设计外，linux的实时调度在性能方面还是不错的。在内核2.6版本中满足了严格时间限制的要求。&lt;/p&gt;

&lt;p&gt;实时优先级从0到MAX_RT_PRIO -1 。默认的情况下是从0到99，因为MAX_RT_PRIO为100。这个优先级区间被&lt;code class=&quot;highlighter-rouge&quot;&gt;SCHED_NORMAL&lt;/code&gt;进程共享，他们采用MAX_RT_PRIO到(MAX_RT_PRIO + 40)。因此默认情况下，-20到19的nice值被映射为100到139的优先级。&lt;/p&gt;

&lt;p&gt;默认优先级:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0到99：实时优先级&lt;/li&gt;
  &lt;li&gt;100到139: 普通优先级&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;调度器相关的系统调用&quot;&gt;调度器相关的系统调用&lt;/h2&gt;

&lt;p&gt;linux提供了一系列的系统调用用来管理调度器参数，这些系统调用可以操作进程优先级，调度策略，操作系统亲和度或者将处理器让给其他进程。&lt;/p&gt;

&lt;p&gt;下面的表是对这些系统调用简单的说明。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;System Call&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;nice()&lt;/td&gt;
      &lt;td&gt;Sets a process’s nice value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_setscheduler()&lt;/td&gt;
      &lt;td&gt;Sets a process’s scheduling policy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_getscheduler()&lt;/td&gt;
      &lt;td&gt;Gets a process’s scheduling policy&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_setparam()&lt;/td&gt;
      &lt;td&gt;Sets a process’s real-time priority&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_getparam()&lt;/td&gt;
      &lt;td&gt;Gets a process’s real-time priority&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_get_priority_max()&lt;/td&gt;
      &lt;td&gt;Gets the maximum real-time priority&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_get_priority_min()&lt;/td&gt;
      &lt;td&gt;Gets the minimum real-time priority&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_rr_get_interval()&lt;/td&gt;
      &lt;td&gt;Gets a process’s timeslice value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_setaffinity()&lt;/td&gt;
      &lt;td&gt;Sets a process’s processor affinity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_getaffinity()&lt;/td&gt;
      &lt;td&gt;Gets a process’s processor affinity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sched_yield()&lt;/td&gt;
      &lt;td&gt;Temporarily yields the processo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;调度策略和优先级相关的系统调用&quot;&gt;调度策略和优先级相关的系统调用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_setscheduler()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_getscheduler()&lt;/code&gt;用来设置或者获取某个进程的调度策略和实时优先级。这两个方法的主要工作是读取&lt;code class=&quot;highlighter-rouge&quot;&gt;task_sturct&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;policy&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;rt_priority&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_setparam()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_getparam()&lt;/code&gt;用于获取进程的实时优先级。这些系统调用对&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_param&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;RT_PRIORITY&lt;/code&gt;进行编码。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_get_priority_max()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_get_priority_min()&lt;/code&gt;返回某个策略的最大和最小优先级。实时优先级的最大值为&lt;code class=&quot;highlighter-rouge&quot;&gt;MAX_USER_RT_PRIO&lt;/code&gt;减一，最小的为1.&lt;/li&gt;
  &lt;li&gt;对于普通的进程，函数&lt;code class=&quot;highlighter-rouge&quot;&gt;nice()&lt;/code&gt;返回特定进程的静态优先级。
    &lt;ul&gt;
      &lt;li&gt;只有管理员才能够设置负数，nice值越低优先级越高&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nice()&lt;/code&gt;调用内核的&lt;code class=&quot;highlighter-rouge&quot;&gt;set_user_nice()&lt;/code&gt;方法，后者用来设置静态优先级以及&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;中的优先级&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;处理器亲和性系统调用&quot;&gt;处理器亲和性系统调用&lt;/h3&gt;

&lt;p&gt;linux调度器强制处理器亲和性，这意味着除了通过将进程保持在同一个处理器上来提供soft affinity或者natural affinity，the scheduler enables a user to enforce “a task must remain on this subset of the available processors no matter what”.（这句话不知道怎么翻译。。。等真的理解了含义再做翻译）&lt;/p&gt;

&lt;p&gt;硬亲和性存储在进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct``·的&lt;/code&gt;cpus_allowed```字段中。系统中的每个处理器在掩码中有一个bit。默认的，所有bit被设置，处理器可以在任何处理器上运行。下面的系统调用可以设置和获取掩码:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;sched_setaffinity() 设置掩码中的一个或者多个bit&lt;/li&gt;
  &lt;li&gt;sched_getaffinity() 获取掩码 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpus_allowed&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内核在下面的规则时强制使用硬亲和性:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;当一个进程刚创建的时候，它继承了父进程的掩码。因为父进程已经在一个允许的处理器上运行了，子进程也必须在某个允许的处理器上运行&lt;/li&gt;
  &lt;li&gt;当一个处理器的掩码改变的时候，内核需要迁移所有线程将该进程放到另一个处理器上&lt;/li&gt;
  &lt;li&gt;负载均衡器仅将进程放到一个允许的处理器上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此只有当进程描述符中的&lt;code class=&quot;highlighter-rouge&quot;&gt;cpus_allowed&lt;/code&gt;中对应位被置位的时候，进程才会在对应的处理上运行。&lt;/p&gt;

&lt;h3 id=&quot;yielding-processor-time&quot;&gt;Yielding Processor Time&lt;/h3&gt;

&lt;p&gt;linux提供了系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_yield()&lt;/code&gt;允许进程主动的让出处理器给另一个进程。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sched_yield()&lt;/code&gt;将进程从活跃数组中删除，将其插入到过期数组中。这不仅仅可以抢占当前的进程，将其放到其优先级队列的尾部，而且还将其放到过期列表中，保证它在一段时间内不会运行。
    &lt;ul&gt;
      &lt;li&gt;对于实时任务，从不过期，因此仅仅将其优先级队列的尾部。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;之类的过期具体指的是什么含义？&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;h2 id=&quot;疑问和解决方案&quot;&gt;疑问和解决方案&lt;/h2&gt;
</description>
				<pubDate>Sat, 06 Jan 2018 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/linux/2018/01/06/lkd-4.html</link>
				<guid isPermaLink="true">http://localhost:4000/linux/2018/01/06/lkd-4.html</guid>
			</item>
		
			<item>
				<title>Lkd 3</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#第三章-进程管理&quot;&gt;第三章 进程管理&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#进程&quot;&gt;进程&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#执行线程&quot;&gt;执行线程&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#虚拟化处理器和虚拟内存&quot;&gt;虚拟化处理器和虚拟内存&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#进程的生命周期&quot;&gt;进程的生命周期&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#fork-exec-exit-和-wait&quot;&gt;fork, exec, exit 和 wait&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#进程描述符和进程结构&quot;&gt;进程描述符和进程结构&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#文件描述符的存储&quot;&gt;文件描述符的存储&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#进程状态&quot;&gt;进程状态&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#操作进程状态&quot;&gt;操作进程状态&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#进程上下文&quot;&gt;进程上下文&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#进程树the-process-family-tree&quot;&gt;进程树(The process family tree)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#进程创建&quot;&gt;进程创建&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#copy-on-write&quot;&gt;Copy-on-Write&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#forking&quot;&gt;Forking&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#vfork&quot;&gt;vfork()&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#linux线程的实现&quot;&gt;linux线程的实现&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#创建线程&quot;&gt;创建线程&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#内核线程&quot;&gt;内核线程&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;
&lt;h1 id=&quot;第三章-进程管理&quot;&gt;第三章 进程管理&lt;/h1&gt;
&lt;p&gt;该章节主要介绍进程的相关内容。进程管理是任何操作系统的重要部分，当然也包括linux。&lt;/p&gt;

&lt;h2 id=&quot;进程&quot;&gt;进程&lt;/h2&gt;
&lt;p&gt;进程在本质上就是一段程序。除了执行的代码，进程还包括一系列的资源:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;打开的文件&lt;/li&gt;
  &lt;li&gt;等待的信号&lt;/li&gt;
  &lt;li&gt;内核数据&lt;/li&gt;
  &lt;li&gt;处理器状态&lt;/li&gt;
  &lt;li&gt;有一个或者多个内存映射的内存地址空间&lt;/li&gt;
  &lt;li&gt;线程&lt;/li&gt;
  &lt;li&gt;包含多个全局变量的数据区&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;执行线程&quot;&gt;执行线程&lt;/h3&gt;
&lt;p&gt;执行线程简称线程，是进程内部的活动实体。
每个线程包括:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;程序计数器&lt;/li&gt;
  &lt;li&gt;线程栈&lt;/li&gt;
  &lt;li&gt;一系列处理器寄存器
内核调度的实体是线程，而不是进程。linux不区分进程和线程，对于linux来说，线程仅仅是一个特殊的进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;虚拟化处理器和虚拟内存&quot;&gt;虚拟化处理器和虚拟内存&lt;/h3&gt;
&lt;p&gt;在现代操作系统中，进程提供了两类虚拟化:虚拟化处理器和虚拟内存。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;虚拟处理器使得进程产生独占系统的幻觉，尽管可能和其他数百个进程共享处理器。&lt;/li&gt;
  &lt;li&gt;虚拟内存使得进程在分配和管理内存的时候觉得自己拥有系统的全部内存。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线程共享虚拟内存抽象，然而每个线程拥有自己的虚拟处理器。&lt;/p&gt;

&lt;h3 id=&quot;进程的生命周期&quot;&gt;进程的生命周期&lt;/h3&gt;
&lt;p&gt;一个进程是一段活跃的程序和相应资源的合体:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;多个进程可以执行相同的程序&lt;/li&gt;
  &lt;li&gt;多个进程可以共享资源，比如打开的文件和地址空间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fork-exec-exit-和-wait&quot;&gt;fork, exec, exit 和 wait&lt;/h3&gt;
&lt;p&gt;在linux系统中，系统调用fork()通过复制一个现有的进程而创建一个新的进程。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调用fork()的进程是父进程，新创建的进程是子进程。&lt;/li&gt;
  &lt;li&gt;父进程恢复运行，并且子进程在同一个地方开始执行: fork()返回的地方。&lt;/li&gt;
  &lt;li&gt;系统调用fork()从内核中返回两次，一个是从父进程，一个是从子进程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;系统调用exec()创建新的地址空间，并且在fork之后装载新的程序到子进程中。在当代linux内核中，fork()实际上是通过系统调用clone()实现的，clone()会在下一节中讨论。&lt;/p&gt;

&lt;p&gt;系统调用exit()终止当前进程并且释放其资源。父进程可以通过wait4()获取被终止的进程的状态。一个进程可以等待另一个进程的终止。当一个进程终止的时候，进程的状态会变为”僵尸”状态，该状态表示进程已经被终止，这个状态会保持知道父进程调用wait()或者waitpid()。内核实现了系统调用wait4()。linux系统通过c库提供了wait()，waitpid()，wait3()和wait4()函数。&lt;/p&gt;

&lt;h2 id=&quot;进程描述符和进程结构&quot;&gt;进程描述符和进程结构&lt;/h2&gt;
&lt;p&gt;进程还有另外一个名字叫任务。linux内核将进程泛指为任务。在这本书中，进程和任务这两个概念可以交换使用，尽管在内核的观点下任务通常指进程。
内核将进程存储在一个环形的双向链表中。
进程的描述符&lt;code class=&quot;highlighter-rouge&quot;&gt;struct task_struct(定义在&amp;lt;linux/sched.h&amp;gt;)&lt;/code&gt;是任务列表中的一个元素。它包含了一个进程的所有信息。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;是一个比较大的数据结构，在32位的机器上大概占用1.7KB。进程描述符包含了描述运行程序的数据: 打开的文件，进程地址空间，等待的信号，进程状态等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://notes.shichao.io/lkd/figure_3.1.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_3.1.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;分配进程描述符&quot;&gt;分配进程描述符&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;是通过slab allocator分配的，这样做的好处是对象重用。结构&lt;code class=&quot;highlighter-rouge&quot;&gt;struct thread_info&lt;/code&gt;进程栈的底部（栈是从高位开始朝地位增长）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://notes.shichao.io/lkd/figure_3.2.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_3.2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在x86系统中，结构&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asm/thread_info.h&amp;gt;&lt;/code&gt;中。每个任务的&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;结构分配在栈的底部。thread_info中的task_struct指向任务的真实的task_struct。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/arch/x86/include/asm/thread_info.h#L26&quot;&gt;arch/x86/include/asm/thread_info.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread_info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_domain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exec_domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__u32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preempt_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mm_segment_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart_block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restart_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sysenter_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uaccess_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;文件描述符的存储&quot;&gt;文件描述符的存储&lt;/h3&gt;
&lt;p&gt;process identification (PID)是一个数字（使用pid_t表示），用于区分进程。默认的最大值是32768(short int)，尽管该值可以增长到4000000万（在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;linux/threads.h&amp;gt;&lt;/code&gt;中控制）。内核在文件描述符中存储pid。&lt;/p&gt;

&lt;p&gt;大型的服务器可能需要超过32768个进程。越大值表示该进程是最近才启动的（原文 The lower the value, the sooner the values will wrap around, destroying the useful notion that higher values indicate later-run processes than lower values）。管理员可以通过修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/sys/kernel/pid_max&lt;/code&gt;来增长最大值。&lt;/p&gt;

&lt;p&gt;在内核中，每个进程都可以直接通过一个指针指向&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;。实际上，内核代码直接通过&lt;code class=&quot;highlighter-rouge&quot;&gt;struct task_struct&lt;/code&gt;处理进程工作。所以，能够快速的查找到进程的描述符是很有用的，而查找是通过一个叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt;的宏来完成的。这个宏必须根据不同的体系结构提供不同的实现:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在某些体系结构中保存指向&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;的指针在寄存器中&lt;/li&gt;
  &lt;li&gt;另一些体系结构比如x86（没有过多的寄存器）通过计算&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;存储在内核栈的位置，然后查找&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在x86结构中，&lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt;通过将栈指针的后13位置为0获得&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;所在位置。这个是在&lt;code class=&quot;highlighter-rouge&quot;&gt;current_thread_info&lt;/code&gt;中实现的，汇编代码如下所示:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;movl&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ea&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;andl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码是在栈大小为8KB的前提下。当4K栈启动的时候，上面的8192会被替换为4096。&lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt;通过引用&lt;code class=&quot;highlighter-rouge&quot;&gt;thread_info&lt;/code&gt;来返回&lt;code class=&quot;highlighter-rouge&quot;&gt;task_sturct&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/asm-generic/current.h&quot;&gt;include/asm-generic/current.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;current_thread_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;进程状态&quot;&gt;进程状态&lt;/h3&gt;
&lt;p&gt;进程描述符中的state描述了进程当前的运行情况。
&lt;img src=&quot;https://notes.shichao.io/lkd/figure_3.3.png&quot; alt=&quot;https://notes.shichao.io/lkd/figure_3.3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;系统中的每个进程都处于上面五个状态中的一个。状态通过五个标志来表示:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TASK_RUNNING: 进程可运行状态；进程可能处于运行状态，也可能在可运行队列中等待调度。只有当进程处于这个状态的时候，进程才有可能在用户空间运行； 同时也在内核空间表示进程在运行状态。&lt;/li&gt;
  &lt;li&gt;TASK_INTERRUPTIBLE: 进程处于睡眠状态(阻塞)，等待某些条件出现。如果进程进程接收到信号，进程也可能提前被唤醒，变成可运行状态。&lt;/li&gt;
  &lt;li&gt;TASK_UNINTERRUPTIBLE: 这个状态和TASK_INTERRUPTIBLE基本上一样，不同的是它不能接收信号而提前被唤醒。这个状态适用于进程必须等待某些事件发生并且不能被中断的情况，或者事件很快就会发生的情况。因为在该状态下进程不会响应信号，所以相比于TASK_INTERRUPTIBLE，TASK_UNINTERRUPTIBLE被使用的频率不是那么高。&lt;/li&gt;
  &lt;li&gt;__TASK_TRACED: 当前进程被其他进程跟踪，比如通过ptrace实现的debugger&lt;/li&gt;
  &lt;li&gt;__TASK_STOPPED: 进程被终止。进程既不处于运行状态，也没有资格被调度。当进程接收到信号SIGSTOP, SIGTSTP, SIGTTIN或者SIGTTOU，或者进程处于debugged的时候接收到任何信号，进程都会转变为__TASK_STOPPED。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;操作进程状态&quot;&gt;操作进程状态&lt;/h3&gt;
&lt;p&gt;内核代码经常需要改变进程状态。进程的改变通过下面的方式实现:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set_task_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* set task ‘task’ to state ‘state’ */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个函数将进程设置为特定的状态。在某些场景下，该方法使用内存栅栏(memoryy barrier)保证其他处理器的有序执行（仅在SMP系统）。因此该方法实际上等同于，&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;方法set_current_state(state)等于set_task_state(current, state)。可以再&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;linux/sched.h&amp;gt;&lt;/code&gt;中看到这些方法的实现&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/sched.h#L226&quot;&gt;nclude/linux/sched.h#L226&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;进程上下文&quot;&gt;进程上下文&lt;/h3&gt;
&lt;p&gt;进程运行的代码来自可执行文件，并且运行在进程的地址空间中。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User-space(用户空间): 通常情况下进程运行在用户空间。&lt;/li&gt;
  &lt;li&gt;Kernel-space(内核空间): 当进程执行系统调用或者触发了异常的时候，进程会进入到内核空间。在这时候，内核代表当前进程运行(executing on behalf of the process)，同时处于进程的上下文中。只要在进程的上下文中，&lt;code class=&quot;highlighter-rouge&quot;&gt;current&lt;/code&gt;宏就能正常工作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了进程上下文，还有中断上下文。在中断上下文时，系统不代表进程运行，而是处于中断处理。中断处理不和任何进程绑定。退出内核后，进程继续在用户看空间运行，除非在间歇期有更高优先级的进程出现，进程调度器会选择那个更高优先级的进程运行而不是当前进程。&lt;/p&gt;

&lt;p&gt;进程只能通过下面的接口进入到内核空间:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;系统调用&lt;/li&gt;
  &lt;li&gt;异常处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;进程树the-process-family-tree&quot;&gt;进程树(The process family tree)&lt;/h3&gt;
&lt;p&gt;系统中所有的进程都是init进程的后代。内核在启动过程的最后一步启动init进程。init进程读取系统初始化脚本，并且执行更多的程序，最终完成系统的启动。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统中的每一个进程都会有父进程。&lt;/li&gt;
  &lt;li&gt;每个进程都会有0个或者更多的子进程。&lt;/li&gt;
  &lt;li&gt;拥有相同父进程的进程被称为兄弟进程（siblings）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;list_head中的next和prev存储了其他list_head中的地址。具体的结构可以参照下图:
&lt;img src=&quot;https://notes.shichao.io/utlk/figure_3-3.png&quot; alt=&quot;https://notes.shichao.io/utlk/figure_3-3.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/list.h&quot;&gt;include/linux/list.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进程之间的关系存储在进程描述符中。每个task_struct(&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/sched.h#L1170&quot;&gt;include/linux/sched.h#L1170&lt;/a&gt;)都含有:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;parent: 指向父进程的task_struct&lt;/li&gt;
  &lt;li&gt;children: 指向子进程列表(struct list_head)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以通过如下的方式获取父进程的描述符:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以通过如下方式遍历进程的所有子进程:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list_for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* task now points to one of current's children */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;list_for_each: &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/list.h#L367&quot;&gt;include/linux/list.h#L367&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;init进程的描述符存放在全局的init_task中，下面的代码通常可以执行成功:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* task now points to init */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你可以根据进程的层级关系从一个进程跟踪到另一个进程。你可以很轻松的遍历所有进程，这是因为系统的进程列表是循环的双向链表。
获取链表中的下一个进程，可以通过下面的代码实现:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;获取链表中的前一个进程，可以通过如下的代码实现:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;list_entry: &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/list.h#L348&quot;&gt;include/linux/list.h&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的两段代码在内核中有对应的宏，分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;next_task(task)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;prev_task(task)&lt;/code&gt;。
宏&lt;code class=&quot;highlighter-rouge&quot;&gt;for_each_process(task)&lt;/code&gt;可以遍历进程列表，每次循环&lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;指向列表中的下一个进程:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;for_each_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* this pointlessly prints the name and PID of each task */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s[%d]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;for_each_process: &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/sched.h#L2139&quot;&gt;include/linux/sched.h#L2139&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当系统中有很多进程的饿时候，遍历每个进程的操作是很昂贵的，在这么做之前你需要三思。&lt;/p&gt;

&lt;h2 id=&quot;进程创建&quot;&gt;进程创建&lt;/h2&gt;

&lt;p&gt;大多数操作系统实现spawn机制，在新的地址空间来创建进程，读取可运行程序。unix系统将这几步分为两个方法: &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;: 通过复制当前进程创建新的进程。只有PID、PPID(父进程pid)和某些不继承的资源与父进程不一样。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;: 装载一个新的程序到地址空间，并且开始执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;copy-on-write&quot;&gt;Copy-on-Write&lt;/h3&gt;
&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;复制父进程的所有资源到子进程，这是低效的，这是因为父子进程可能共享这些资源。更糟糕的是，子进程可能会立刻执行新的程序（通过exec加载），之前的所有拷贝内容都浪费了。&lt;/p&gt;

&lt;p&gt;在linux中，&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;通过copy-on-write实现。&lt;/p&gt;

&lt;p&gt;Copy-on-write(COW)可以延迟或者不复制数据。相比于复制进程的地址空间，父进程和子进程共享一个拷贝。&lt;/p&gt;

&lt;p&gt;如果某个数据被修改，那么这个数据将会被标记，然后父子进程各自有自己的一个拷贝。资源的复制只会在资源被修改的时候才会发生，直到修改发生之前这些资源都是只读的。&lt;/p&gt;

&lt;p&gt;如果某些页从来不会被改写，那么它们也就不会被拷贝。&lt;/p&gt;

&lt;p&gt;fork()唯一的开销就是页表的拷贝和子进程描述符的创建。通常情况下，如果进程在fork()之后立刻执行新的程序，那么copy-on-write可以节省大量的资源拷贝带来的开销。这是一个很重要的优化，因为unix哲学鼓励进快速启动。&lt;/p&gt;

&lt;h3 id=&quot;forking&quot;&gt;Forking&lt;/h3&gt;

&lt;p&gt;linux通过&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;实现&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;接受一系列的标志用于指定哪些资源需要被父子进程共享。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;__clone&lt;/code&gt;都是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;，并且指定各自所需的标志位&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fork中的大部分工作是在&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;中完成的，&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;kernal/fork.c&amp;gt;&lt;/code&gt;中。&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_process()&lt;/code&gt;方法，然后运行新的进程。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;do_fork(): &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/kernel/fork.c#L1354&quot;&gt;kernel/fork.c#L1354&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;copy_process(): &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/kernel/fork.c#L957&quot;&gt;kernel/fork.c#L957&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fork中最有趣的一部分在&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_process()&lt;/code&gt;中:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;它调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dup_task_struct()&lt;/code&gt;创建子进程的描述符，同时设置以下的属性和父进程一致:
    * 内核栈
    * thread_info
    * task_struct&lt;/li&gt;
  &lt;li&gt;检查当前进程没有超过当前用户的可启动进程限制。&lt;/li&gt;
  &lt;li&gt;一些属性被清除或者初始化，用于区分父子进程:
    * 不需要从父进程继承的属性主要包括一些统计信息
    * task_struct的大多数属性仍然保持不变&lt;/li&gt;
  &lt;li&gt;进程状态设置为TASK_UNINTERRUPTIBLE，保证当前进程还未开始运行&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_flags()&lt;/code&gt;更新task_struct中的标志信息（per process flags: &lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/sched.h#L1693&quot;&gt;include/linux/sched.h#L1693&lt;/a&gt;）
    * PF_SUPERPRIV表示当前进程是否需要超级用户权限，这个标志位被清除
    * PF_FORKNOEXEC表示当前进程还没有执行&lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;，这个标志位被设置&lt;/li&gt;
  &lt;li&gt;调用alloc_pid给子进程分配pid&lt;/li&gt;
  &lt;li&gt;根据传入到clone的标志位，&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_process()&lt;/code&gt;复制或者共享下面的资源:
    * Open files（打开的文件）
    * Filesystem information（文件系统信息）
    * Signal handlers（信号处理）
    * Process address space（进程空间）
    * Namespace（命名空间）&lt;/li&gt;
  &lt;li&gt;copy_process()返回一个指向当前进程的指针&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;回到&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;方法，如果&lt;code class=&quot;highlighter-rouge&quot;&gt;copy_process()&lt;/code&gt;成功返回，新进程被唤醒并且执行。
内核会先运行子进程。如果内核先执行父进程，那么当子进程在启动后立刻执行exec方法的时候，父进程修改数据后copy-on-write带来的拷贝就会变得无效了（注1）。&lt;/p&gt;

&lt;p&gt;==注1: 在这种情况下copy-on-write带来的拷贝对于子进程是没有意义的，因为子进程执行了exec方法，exec会覆盖子进程里面原有的数据==&lt;/p&gt;

&lt;h3 id=&quot;vfork&quot;&gt;vfork()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt; 方法和&lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;方法的效果一致，除了页表不进行复制。子进程作为父进程地址空间内的唯一线程运行，并且父进程会阻塞，直到子进程调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt; 或者退出。子进程不允许对地址空间进行修改。
如今，再有了copy-on-write和子进程优先运行的语义下，&lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt;带来的唯一好处是不拷贝父进程的页表。
&lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt; 也是通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;实现的，它传入了特殊的标志:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;在copy_process中，task_struct中的vfork_done被设置为NULL。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;中，如果特殊的标志位被设置，vfork_done指向一个特殊的地址。&lt;/li&gt;
  &lt;li&gt;当子进程运行后，父进程等待子进程发送信号给它。信号的发送是通过vfork_done指针完成的。&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;mm_release()&lt;/code&gt;方法中，vfork_done会被检查是否为NULL。如果不是，父进程会被发送信号。&lt;/li&gt;
  &lt;li&gt;回到&lt;code class=&quot;highlighter-rouge&quot;&gt;do_fork()&lt;/code&gt;方法，父进程唤醒并且返回。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果上面的几步都顺利执行，那么子进程会在新的地址空间运行，并且父进程回到原来的地址空间继续执行。开销是很低的，但是实现不够优雅。&lt;/p&gt;

&lt;p&gt;==注2: 子进程只有调用exec，父进程才能继续执行？==&lt;/p&gt;

&lt;h2 id=&quot;linux线程的实现&quot;&gt;linux线程的实现&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;线程是一种编程抽象，多个线程共享同一个地址空间。&lt;/li&gt;
  &lt;li&gt;线程也可以共享打开的文件和其他资源。&lt;/li&gt;
  &lt;li&gt;在多核系统上，多线程可以用于并发编程，并且在这种情况下并发编程也可以叫做并行编程。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;linux对于线程有自己独特的实现:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于linux内核来说，不存在线程的概念。Linux通过标准的进程来模拟线程的实现。&lt;/li&gt;
  &lt;li&gt;linux对于线程没有提供特殊的调度方式，也没有提供特殊的数据结构来表示线程。相反，一个线程仅仅是和其他进程共享特定资源的进程。&lt;/li&gt;
  &lt;li&gt;每个线程都有自己的task_struct，对于内核来说就是一个普通的进程。线程仅仅是共享资源，比如地址空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这种实现方式和其他操作系统比如windows、sun solaris完全不同，这些操作系统原生支持了线程。&lt;/p&gt;

&lt;h3 id=&quot;创建线程&quot;&gt;创建线程&lt;/h3&gt;

&lt;p&gt;线程的创建和普通进程一样，需要传递特殊的标志位用于共享特定的资源:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;clone(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码和fork()基本一致，除了设置了标志CLONE_VM，CLONE_FS, CLONE_FILES和CLONE_SIGHAND。
而fork()则是通过下面的代码实现的，&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;vfork()则是通过下面的代码实现的，&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLONE_VFORK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_VM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面提到的标志位，在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;linux/sched.h&amp;gt;&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/sched.h#L5&quot;&gt;include/linux/sched.h#L5&lt;/a&gt;)中定义的，这些标志位用于指定子进程和父进程之间共享哪些资源。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flag	        Meaning
CLONE_FILES	 Parent and child share open files.
CLONE_FS	    Parent and child share filesystem information.
CLONE_IDLETASK	Set PID to zero (used only by the idle tasks).
CLONE_NEWNS	    Create a new namespace for the child.
CLONE_PARENT	Child is to have same parent as its parent.
CLONE_PTRACE	Continue tracing child.
CLONE_SETTID	Write the TID back to user-space.
CLONE_SETTLS	Create a new TLS (thread-local storage) for the child.
CLONE_SIGHAND	Parent and child share signal handlers and blocked signals.
CLONE_SYSVSEM	Parent and child share System V SEM_UNDO semantics.
CLONE_THREAD	Parent and child are in the same thread group.
CLONE_VFORK	vfork() was used and the parent will sleep until the child wakes it.
CLONE_UNTRACED	Do not let the tracing process force CLONE_PTRACE on the child.
CLONE_STOP	Start process in the TASK_STOPPED state.
CLONE_CHILD_CLEARTID	Clear the TID in the child.
CLONE_CHILD_SETTID	Set the TID in the child.
CLONE_PARENT_SETTID	Set the TID in the parent.
CLONE_VM	Parent and child share address space.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;内核线程&quot;&gt;内核线程&lt;/h3&gt;

&lt;p&gt;内核线程是在内核空间中的进程，它们用于内核在后台执行某些特定的操作。
和普通线程的不同:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内核线程没有地址空间。它们的mm指针为NULL。&lt;/li&gt;
  &lt;li&gt;内核线程只能运行在内核空间，不会切换上下文到用户空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和普通线程相似的地方:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内核线程是可调度的并且是可抢占的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;linux系统会把某些任务交给内核线程，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;flush&lt;/code&gt;线程和&lt;code class=&quot;highlighter-rouge&quot;&gt;ksoftirqd&lt;/code&gt;。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ps -ef&lt;/code&gt;可以看到这些内核线程。&lt;/p&gt;

&lt;p&gt;内核线程是在系统启动的时候启动的。一个内核线程只能被另一个内核线程启动。内核通过fork kthreadd进程来自动启动这些内核线程。&lt;/p&gt;

&lt;p&gt;内核线程相关的接口定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;linux/kthread.h&amp;gt;&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/include/linux/kthread.h&quot;&gt;include/linux/kthread.h&lt;/a&gt;)中，&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_create()&lt;/code&gt; 启动一个新的内核线程，&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                   &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namefmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新的进程是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;clone()&lt;/code&gt;创建的，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;新的进程会执行threadfn函数，这个函数被当做参数传入kthread_create&lt;/li&gt;
  &lt;li&gt;进程的名字是namefmt&lt;/li&gt;
  &lt;li&gt;该进程被创建后处于非运行状态，直到调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wake_Up_process()&lt;/code&gt;之后才能够运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过函数&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_run()&lt;/code&gt;，进程可以被创建并且运行:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kthread_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namefmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_run()&lt;/code&gt;, 实际上是一个宏,&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define kthread_run(threadfn, data, namefmt, ...)                 \
({                                                                \
    struct task_struct *k;                                        \
                                                                  \
    k = kthread_create(threadfn, data, namefmt, ## __VA_ARGS__);  \
    if (!IS_ERR(k))                                               \
        wake_up_process(k);                                       \
    k;                                                            \
})
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;内核线程创建后会一直运行知道它调用&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;或者内核其他部分执行&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_stop()&lt;/code&gt;，在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_stop()&lt;/code&gt;的时候传入&lt;code class=&quot;highlighter-rouge&quot;&gt;kthread_create()&lt;/code&gt;返回的task_struct:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kthread_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;进程终止&quot;&gt;进程终止&lt;/h2&gt;

&lt;p&gt;当进程终止的时候，内核释放进程拥有的资源并且通知该进程的父进程。
当进程调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;方法的时候会终止自己:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;明确的: 进程调用系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;隐晦的: 进程从main函数返回的时候。C编译器会在main的最后添加&lt;code class=&quot;highlighter-rouge&quot;&gt;exit()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当进程接收到一个它不能处理或者忽略的信号或者异常的时候，进程会被动终止。
无论进程以何种方式被终止，最后都需要调用&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;kernel/exit.c&lt;/code&gt;(&lt;a href=&quot;https://github.com/shichao-an/linux-2.6.34.7/blob/master/kernel/exit.c#L900&quot;&gt;kernel/exit.c&lt;/a&gt;)中。&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;做了如下的工作:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;设置task_struct的PF_EXITING标志位&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;del_timer_sync()&lt;/code&gt;方法移除所有内核计时器。当del_timer_sync()返回的时候保证没有计时器正在运行，并且没有计时器在排队。&lt;/li&gt;
  &lt;li&gt;如果BSD的进程统计功能开启，&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;acct_update_integrals()&lt;/code&gt;将统计信息回写&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_mm()&lt;/code&gt;方法释放该进程的&lt;code class=&quot;highlighter-rouge&quot;&gt;mm_struct&lt;/code&gt;，如果没有其他进程在使用这个进程空间，内核会释放空间&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_sem()&lt;/code&gt;。如果进程在等待某个IPC semaphore，它会退出等待队列&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_files()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_fs()&lt;/code&gt;来减少文件句柄和文件系统的引用。&lt;/li&gt;
  &lt;li&gt;设置进程的退出码，这个退出码存放在task_struct的exit_code中，父进程可以选择性的获取该退出码。(It sets the task’s exit code (stored in the exit_code member of the task_struct) to that provided by exit() or whatever kernel mechanism forced the termination. The exit code is stored here for optional retrieval by the parent.)&lt;/li&gt;
  &lt;li&gt;发送信号给父进程，并且通知子进程寻找新的父进程
    * 调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_notify()&lt;/code&gt;发送信号给进程的父进程
    * 将同线程组的线程或者init进程指定为其子进程的新的父进程
    * 设置task_struct中的exit_state为EXIT_ZOMBIE&lt;/li&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;schedule()&lt;/code&gt;切换到新的进程
    * 因为当前进程处于不可调度状态，所以这会是当前进程执行的最后的代码。&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;没有返回。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到这里:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;所有和该进程相关的对象已经释放&lt;/li&gt;
  &lt;li&gt;该进程不可运行，并且状态是EXIT_ZOMBIE&lt;/li&gt;
  &lt;li&gt;目前其拥有的唯一内存是内核栈，thread_info和task_struct结构&lt;/li&gt;
  &lt;li&gt;该进程仍然存在用于提供信息给其父进程。当父进程提取信息后，或者通知内核其不感兴趣，该进程剩余的内存就会被释放。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;移除进程描述符&quot;&gt;移除进程描述符&lt;/h3&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt;完成后，进程描述符仍然存在，但是进程处于僵尸状态不能运行。
进程的清除工作和移除其描述符分开的步骤。这样做可以使得系统可以在进程终止后获取信息。
在遇到下面的情况后，终止进程的task_struct会回收利用:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;父进程从被终止的进程的获取信息&lt;/li&gt;
  &lt;li&gt;父进程通知系统它不关注被终止的进程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; 方法通过系统调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wait4()&lt;/code&gt;来实现。
通常情况下调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;的方法后进程会被挂起直到其中的一个子进程退出，此时&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;返回退出进程的pid。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;release_task()&lt;/code&gt; 用于释放进程描述符:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit_signal()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit_signal()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;__unhash_process()&lt;/code&gt;方法，&lt;code class=&quot;highlighter-rouge&quot;&gt;__unhash_process()&lt;/code&gt;最后调用detach_pid()把进程从pidhash移除，并且从任务列表中删除。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__exit_signal()&lt;/code&gt;释放进程的其他所有剩余资源&lt;/li&gt;
  &lt;li&gt;如果线程是线程组的最后一个线程，并且leader的状态是zombie，&lt;code class=&quot;highlighter-rouge&quot;&gt;release_task()&lt;/code&gt;通知僵尸进程的父进程&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;release_task()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;put_task_struct()&lt;/code&gt;来释放进程内核栈中的页，和thread_info以及task_struct中的slab缓存&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;the-dilemma-of-the-parentless-task&quot;&gt;The Dilemma of the Parentless Task&lt;/h3&gt;

&lt;p&gt;如果父进程比子进程先退出，子进程必须寻找一个新的进程作为其父进程。否则没有父进程的被终止进程将会一直保持僵尸状态，浪费系统的内存。&lt;/p&gt;

&lt;p&gt;为了防止无父进程的子进程被终止的时候一直处于僵尸状态，需要从线程组或者init进程中寻找一个新的父进程。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;do_exit()&lt;/code&gt; 调用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_notify()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;exit_notify()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;forget_original_parent()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;forget_original_parent()&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;find_new_reaper()&lt;/code&gt;来寻找新的父类:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_new_reaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_active_pid_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_struct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;while_each_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PF_EXITING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write_unlock_irq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasklist_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlikely&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_pid_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Attempted to kill init!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;zap_pid_ns_processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write_lock_irq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasklist_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*
        * We can not clear -&amp;gt;child_reaper or leave it alone.
        * There may by stealth EXIT_DEAD tasks on -&amp;gt;children,
        * forget_original_parent() must move them somewhere.
        */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_pid_ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid_ns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_reaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码试图在进程的线程组中查找一个进程。如果线程组中没有对应的进程，那么返回init进程。&lt;/p&gt;

&lt;p&gt;在合适的父进程找到后，每个子进程需要重新指定父进程。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;reaper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_new_reaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list_for_each_entry_safe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sibling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reaper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BUG_ON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reparent_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;father&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-ptrace_exit_finish()```会被调用重新指定父进程，但是作用的对象是被ptraced的子进程。&quot;&gt;```c
void exit_ptrace(struct task_struct *tracer)
{
    struct task_struct *p, *n;
    LIST_HEAD(ptrace_dead);

    write_lock_irq(&amp;amp;tasklist_lock);
    list_for_each_entry_safe(p, n, &amp;amp;tracer-&amp;gt;ptraced, ptrace_entry) {
        if (__ptrace_detach(tracer, p))
        list_add(&amp;amp;p-&amp;gt;ptrace_entry, &amp;amp;ptrace_dead);
    }
    write_unlock_irq(&amp;amp;tasklist_lock);

    BUG_ON(!list_empty(&amp;amp;tracer-&amp;gt;ptraced));

    list_for_each_entry_safe(p, n, &amp;amp;ptrace_dead, ptrace_entry) {
    list_del_init(&amp;amp;p-&amp;gt;ptrace_entry);
    release_task(p);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当一个进程被ptraced后，调试进程会临时成为被ptraced进程的父进程。当一个进程的父进程终止的时候，它和它的兄弟进程必须重新寻找父进程。在之前的内核中，这会导致系统遍历所有进程来寻找兄弟进程。解决方法是单独为进程存储一份列表，列表中存放ptraced继承，这样用于减少寻找子进程的开销。&lt;/p&gt;

&lt;p&gt;当所有进程重新找到父节点后，就不存在进程一直处于僵尸状态而无法回收的危险了。init进程针对其子进程调用&lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt;方法，清除僵尸进程。&lt;/p&gt;

&lt;p&gt;原文地址: &lt;a href=&quot;https://notes.shichao.io/lkd/ch3/&quot;&gt;https://notes.shichao.io/lkd/ch3/&lt;/a&gt;&lt;/p&gt;

</description>
				<pubDate>Sun, 31 Dec 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/linux/2017/12/31/lkd-3.html</link>
				<guid isPermaLink="true">http://localhost:4000/linux/2017/12/31/lkd-3.html</guid>
			</item>
		
			<item>
				<title>Lkd 翻译</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#什么是lkd&quot;&gt;什么是lkd?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么要翻译&quot;&gt;为什么要翻译？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;
&lt;h1 id=&quot;什么是lkd&quot;&gt;什么是lkd?&lt;/h1&gt;

&lt;p&gt;Linux kernel development 3rd edition&lt;/p&gt;

&lt;h1 id=&quot;为什么要翻译&quot;&gt;为什么要翻译？&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;练习英文和语言组织能力&lt;/li&gt;
  &lt;li&gt;虽然已经有中文版的纸质书籍，但是看后仍然会有不理解和记不住的地方。希望通过翻译英文原版加深印象，更好地理解原作者所要阐述的观点&lt;/li&gt;
  &lt;li&gt;培养自己持之以恒的能力&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 30 Dec 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/linux/2017/12/30/lkd-%E7%BF%BB%E8%AF%91.html</link>
				<guid isPermaLink="true">http://localhost:4000/linux/2017/12/30/lkd-%E7%BF%BB%E8%AF%91.html</guid>
			</item>
		
			<item>
				<title>微服务架构图</title>
				<description>&lt;p&gt;微服务的概念已经存在很多年了，无论微服务是复杂还是简单，其本质的架构都存在许多相同点，这里大概总结下我所了解的微服务架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/互联网经典常规拓扑图.png&quot; alt=&quot;/assets/images/互联网经典常规拓扑图.png&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Sat, 23 Dec 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/arch/2017/12/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.html</link>
				<guid isPermaLink="true">http://localhost:4000/arch/2017/12/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.html</guid>
			</item>
		
			<item>
				<title>Springmvc的启动</title>
				<description>&lt;p&gt;传统的使用SpringMVC的方法是在web.xml中配置DispatchServlet，在SpringMVC 3.1版本后提供了一种新的启动方式。在介绍这种新的方式之前，有必要先介绍一下Servlet 3.0的一个新特性 &lt;strong&gt;ServletContainerInitializer&lt;/strong&gt; 。先看一下javadoc对该接口的介绍&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;实现该接口的类会成为web应用的入口，并且在启动期间可以注入servlets，filters，和listeners。

该接口的实现类可能会包含 **javax.servlet.annotation.HandlesTypes** 注解，该注解的value对应的Class&amp;lt;?&amp;gt; []， 用于表示该接口的实现类的onStartup方法会接收Class&amp;lt;?&amp;gt; []对应的实现或者子类作为参数。

如果该接口的实现类不包含 **javax.servlet.annotation.HandlesTypes** 注解，或者应用中没有该注解中对应的Class，则需要传递null给onStartup方法。

如果实现了该接口则需要在jar的META-INF/services目录下放置一个文件，改文件的名称必须是该接口的全名称。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从上面javadoc的注释可以看出，当应用启动的时候，如果有 &lt;strong&gt;ServletContainerInitializer&lt;/strong&gt; 的实现类并且有相应的配置，则会使用该类作为web的入口。&lt;/p&gt;

&lt;p&gt;SpringMVC新的启动方式正是基于上面提到的 &lt;strong&gt;ServletContainerInitializer&lt;/strong&gt; 接口，其实现类是 &lt;strong&gt;SpringServletContainerInitializer&lt;/strong&gt; ，下面看看该类的实现，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@HandlesTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringServletContainerInitializer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContainerInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webAppInitializerClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webAppInitializerClasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webAppInitializerClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Be defensive: Some servlet containers provide us with invalid classes,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// no matter what @HandlesTypes says...&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAbstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getModifiers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAssignableFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waiClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waiClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to instantiate WebApplicationInitializer class&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No Spring WebApplicationInitializer types detected on classpath&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Spring WebApplicationInitializers detected on classpath&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;AnnotationAwareOrderComparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApplicationInitializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servleContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码功能比较明确，针对每一个传入的 &lt;strong&gt;WebApplicationInitializer&lt;/strong&gt; 的实现类进行实例化，然后将这些实例化的对象进行排序操作。排序的规则是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果类带有 &lt;strong&gt;org.springframework.core.annotation.Order&lt;/strong&gt; 标签，则获取对应的Order值，如果类实现 &lt;strong&gt;org.springframework.core.Ordered&lt;/strong&gt; 接口，则调用getOrder方法获取Order值，如果都没有则为最低Order值。获取所有实例的Order值后，根据Order值进行排序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;排序好后，依次调用实例的onStartup方法进行初始化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SpringServletContainerInitialize&lt;/strong&gt; 作为SpringMVC初始化的入口，最终的实现依赖于 &lt;strong&gt;WebApplicationInitializer&lt;/strong&gt; 的实现类 &lt;strong&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/strong&gt; ，&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractAnnotationConfigDispatcherServletInitializer&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractDispatcherServletInitializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * {@inheritDoc}
	 * &amp;lt;p&amp;gt;This implementation creates an {@link AnnotationConfigWebApplicationContext},
	 * providing it the annotated classes returned by {@link #getRootConfigClasses()}.
	 * Returns {@code null} if {@link #getRootConfigClasses()} returns {@code null}.
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createRootApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRootConfigClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;AnnotationConfigWebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotationConfigWebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * {@inheritDoc}
	 * &amp;lt;p&amp;gt;This implementation creates an {@link AnnotationConfigWebApplicationContext},
	 * providing it the annotated classes returned by {@link #getServletConfigClasses()}.
	 */&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createServletApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;AnnotationConfigWebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotationConfigWebApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServletConfigClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * Specify {@link org.springframework.context.annotation.Configuration @Configuration}
	 * and/or {@link org.springframework.stereotype.Component @Component} classes to be
	 * provided to the {@linkplain #createRootApplicationContext() root application context}.
	 * @return the configuration classes for the root application context, or {@code null}
	 * if creation and registration of a root context is not desired
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getRootConfigClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * Specify {@link org.springframework.context.annotation.Configuration @Configuration}
	 * and/or {@link org.springframework.stereotype.Component @Component} classes to be
	 * provided to the {@linkplain #createServletApplicationContext() dispatcher servlet
	 * application context}.
	 * @return the configuration classes for the dispatcher servlet application context or
	 * {@code null} if all configuration is specified through root config classes.
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServletConfigClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;该类提供了两个抽象方法 &lt;strong&gt;getRootConfigClasses&lt;/strong&gt; 和 &lt;strong&gt;getServletConfigClasses&lt;/strong&gt; ，前者用于获取创建RootApplicationContext的配置，后者用于获取创建ServletApplicationContext的配置。另外两个方法 &lt;strong&gt;createRootApplicationContext&lt;/strong&gt; ，&lt;strong&gt;createServletApplicationContext&lt;/strong&gt; 用于创建RootApplicationContext和ServletApplicationContext。这个类的入口onStartup在其父类 &lt;strong&gt;AbstractDispatcherServletInitializer&lt;/strong&gt; 中。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerDispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;onStartup会首先调用其父类 &lt;strong&gt;AbstractContextLoaderInitializer&lt;/strong&gt; 的onStartup方法进行初始化，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerContextLoaderListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerContextLoaderListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createRootApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ContextLoaderListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextLoaderListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContextInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRootApplicationContextInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No ContextLoaderListener registered, as &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;createRootApplicationContext() did not return an application context&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;AbstractContextLoaderInitializer&lt;/strong&gt; 的onStartup主要用于初始化RootApplicationContext。在RootApplicationContext初始化好后，&lt;strong&gt;AbstractDispatcherServletInitializer&lt;/strong&gt; 会继续初始化DispatcherServlet。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerDispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServletContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServletName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;getServletName() must not return empty or null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;WebApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createServletApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;createServletApplicationContext() did not return an application &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;context for servlet [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;FrameworkServlet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatcherServlet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createDispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletAppContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;dispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContextInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getServletApplicationContextInitializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ServletRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Failed to register servlet with name '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;'.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Check if there is another servlet registered under the same name.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLoadOnStartup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getServletMappings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAsyncSupported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAsyncSupported&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServletFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;registerServletFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;customizeRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;registerDispatcherServlet&lt;/strong&gt; 调用 &lt;strong&gt;createServletApplicationContext&lt;/strong&gt; 创建ServletApplicationContext，然后创建DispatcherServlet，设置ServletMapping，然后注册Filter。&lt;/p&gt;

&lt;p&gt;经过上面的流程，SpringMVC的加载过程就完成了后续的请求处理就和通过web.xml启动的SpringMVC一样了。&lt;/p&gt;
</description>
				<pubDate>Sun, 26 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/spring/2017/11/26/SpringMVC%E7%9A%84%E5%90%AF%E5%8A%A8.html</link>
				<guid isPermaLink="true">http://localhost:4000/spring/2017/11/26/SpringMVC%E7%9A%84%E5%90%AF%E5%8A%A8.html</guid>
			</item>
		
			<item>
				<title>Spring@scheduled扩展</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#问题&quot;&gt;问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#方案设计&quot;&gt;方案设计&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实现&quot;&gt;实现&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#handler&quot;&gt;Handler&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parser&quot;&gt;Parser&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#beanpostprocessor&quot;&gt;BeanPostProcessor&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#核心类&quot;&gt;核心类&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用方法&quot;&gt;使用方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#其他&quot;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;p&gt;近期项目中使用到了spring的定时任务，只需要使用 &lt;strong&gt;@Scheduled&lt;/strong&gt; 并且简单的配置就可以启动定时任务，十分方便。
但是我们在用的时候由于对多个任务进行了抽象，希望得到的效果是由抽象类作为调度的入口，各个子实现类负责具体的任务执行，同时又希望多个任务的调度时间可以不同。举个例子，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractSchedule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Scheduled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${cron}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;doTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Schedule1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractSchedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;schedule1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Schedule2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractSchedule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;schedule2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;我们希望上面的task作为入口，同时希望  &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解中的 &lt;strong&gt;${cron}&lt;/strong&gt; 能够针对不同的子类起到不同的效果。&lt;/p&gt;

&lt;p&gt;但是目前的 &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解无法满足我们的要求，按照上面的代码每个任务的时间都是相同的。如果每个子类单独设置 &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解则破坏了我们使用抽象类的初衷。&lt;/p&gt;

&lt;h2 id=&quot;方案设计&quot;&gt;方案设计&lt;/h2&gt;

&lt;p&gt;为了实现上面想要达到的效果，在网上找了许多很多资料，没有发现现成的方法，无奈只得自己想办法。回想下上面提到的需求:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;通过统一入口调度，并且时间可以区分设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们知道 &lt;strong&gt;@Scheduled&lt;/strong&gt; 的解析是在当前的task对应的bean初始化完成后调用BeanPostProcessor进行处理的，具体到源码中对应的就是&lt;strong&gt;ScheduledAnnotationBeanostProcessor&lt;/strong&gt;。在这个processor中会读取 &lt;strong&gt;@Scheduled&lt;/strong&gt; 的cron，如果是cron是 &lt;strong&gt;${}&lt;/strong&gt; 这种形式的则会调用StringResolver进行解析，也就是说我们能否在这个processor处理之前对cron的值做出修改，修改成每个子类有自己的值呢？当然是可以的只需要我们在 &lt;strong&gt;ScheduledAnnotationBeanostProcessor&lt;/strong&gt; 之前插入另一个Processor即可，并且新插入的Processor优先级要高于 &lt;strong&gt;ScheduledAnnotationBeanostProcessor&lt;/strong&gt; 。但是这样做又会有一个问题，因为 &lt;strong&gt;@Scheduled&lt;/strong&gt; 是加在抽象类上的，一旦修改就会影响其他类，更何况抽象类加载后不允许修改 &lt;strong&gt;@Scheduled&lt;/strong&gt; 。这个思路似乎行不通，但是不要着急，我们换个角度想，如果抽象类不能修改我们能否修改子类呢？这时候你可能会想子类没有 &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解，并且子类即使有 &lt;strong&gt;@Scheduled&lt;/strong&gt;，也是不允许修改的。&lt;/p&gt;

&lt;p&gt;这时候问题变成了下面的两个子问题，&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;子类没有@Scheduled&lt;/li&gt;
  &lt;li&gt;子类即使有@Scheduled，也是不允许修改的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;针对上面的问题，我们采用如下的方法解决，&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;将子类作为父类，运行时动态创建新的子类&lt;/li&gt;
  &lt;li&gt;在新生成的子类中添加一个方法，方法名与 &lt;strong&gt;@Scheduled&lt;/strong&gt; 所在方法一致，并且方法的作用就是调用 &lt;strong&gt;@Scheduled&lt;/strong&gt; 所在方法。&lt;/li&gt;
  &lt;li&gt;为新生成的方法添加 &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解，并且修改对应的cron为类单独的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过上面的方法可以达到的效果是，针对每个task生成了一个新的类，并且都带有自己的 &lt;strong&gt;@Scheduled&lt;/strong&gt; 方法。&lt;/p&gt;

&lt;h2 id=&quot;实现&quot;&gt;实现&lt;/h2&gt;

&lt;h3 id=&quot;handler&quot;&gt;Handler&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ScheduleNamespaceHandler extends NamespaceHandlerSupport {

    @Override
    public void init() {
        registerBeanDefinitionParser(&quot;cron-attach-class&quot;, new CronAttachClassParser());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;parser&quot;&gt;Parser&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CronAttachClassParser implements BeanDefinitionParser {

    public static final String CRON_ATTACH_CLASS_PROCESSOR_BEAN_NAME = &quot;com.lpmoon.spring.schedule.cronAttachClassBeanPostProcessor&quot;;

    @Override
    public BeanDefinition parse(Element element, ParserContext parserContext) {
        Object source = parserContext.extractSource(element);
        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(
                &quot;com.lpmoon.spring.schedule.CronAttachClassBeanPostProcessor&quot;);
        builder.getRawBeanDefinition().setSource(source);

        registerPostProcessor(parserContext, builder, CRON_ATTACH_CLASS_PROCESSOR_BEAN_NAME);

        return null;
    }

    private static void registerPostProcessor(
            ParserContext parserContext, BeanDefinitionBuilder builder, String beanName) {

        builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());
        BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);
        parserContext.registerComponent(new BeanComponentDefinition(holder));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Parser主要的功能就是注册BeanPostProcessor，用于实现我们上面的设想。&lt;/p&gt;

&lt;h3 id=&quot;beanpostprocessor&quot;&gt;BeanPostProcessor&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CronAttachClassBeanPostProcessor implements DestructionAwareBeanPostProcessor,
        Ordered, EmbeddedValueResolverAware, BeanFactoryAware, ApplicationContextAware,
        SmartInitializingSingleton, ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt;, DisposableBean {

    private final Set&amp;lt;Class&amp;lt;?&amp;gt;&amp;gt; nonAnnotatedClasses =
            Collections.newSetFromMap(new ConcurrentHashMap&amp;lt;Class&amp;lt;?&amp;gt;, Boolean&amp;gt;(64));

    private StringValueResolver embeddedValueResolver;

    private BeanFactory beanFactory;

    private ApplicationContext applicationContext;

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        this.beanFactory = beanFactory;
    }

    @Override
    public void destroy() throws Exception {

    }

    @Override
    public void afterSingletonsInstantiated() {

    }

    @Override
    public void postProcessBeforeDestruction(Object bean, String beanName) throws BeansException {

    }

    @Override
    public boolean requiresDestruction(Object bean) {
        return false;
    }

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {

        Class&amp;lt;?&amp;gt; targetClass = AopUtils.getTargetClass(bean);

        if (!this.nonAnnotatedClasses.contains(targetClass)) {
            Map&amp;lt;Method, Set&amp;lt;Scheduled&amp;gt;&amp;gt; annotatedMethods = MethodIntrospector.selectMethods(targetClass,
                    new MethodIntrospector.MetadataLookup&amp;lt;Set&amp;lt;Scheduled&amp;gt;&amp;gt;() {
                        @Override
                        public Set&amp;lt;Scheduled&amp;gt; inspect(Method method) {
                            Set&amp;lt;Scheduled&amp;gt; scheduledMethods = AnnotatedElementUtils.getMergedRepeatableAnnotations(
                                    method, Scheduled.class, Schedules.class);
                            return (!scheduledMethods.isEmpty() ? scheduledMethods : null);
                        }
                    });
            if (annotatedMethods.isEmpty()) {
                this.nonAnnotatedClasses.add(targetClass);
            }
            else {
                //
                try {
                    return ExtentScheduledTaskFactory.generate(bean);
                } catch (NotFoundException e) {
                    e.printStackTrace();
                } catch (CannotCompileException e) {
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return bean;

    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {

    }

    @Override
    public void setEmbeddedValueResolver(StringValueResolver resolver) {
        this.embeddedValueResolver = embeddedValueResolver;
    }

    @Override
    public int getOrder() {
        return Ordered.HIGHEST_PRECEDENCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BeanPostProcessor会针对每一个带有 &lt;strong&gt;@Scheduled&lt;/strong&gt; 方法进行一系列操作，包括生成新类，添加方法，添加注解，并且实例化新类用于替换老的对象。需要注意的是为了保证这个Processor在 &lt;strong&gt;ScheduledAnnotationBeanostProcessor&lt;/strong&gt; 之前执行，我们需要设置其优先级高于 &lt;strong&gt;ScheduledAnnotationBeanostProcessor&lt;/strong&gt; 。所以我们在这里设置其优先级为 &lt;strong&gt;Ordered.HIGHEST_PRECEDENCE&lt;/strong&gt; 。&lt;/p&gt;

&lt;h3 id=&quot;核心类&quot;&gt;核心类&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ExtentScheduledTaskFactory {

    public static Object generate(Object source) throws Exception {

        // generate new class extends source class
        ClassPool pool = ClassPool.getDefault();
        CtClass parent = pool.get(source.getClass().getName());
        CtClass child = pool.makeClass(source.getClass().getSimpleName() + &quot;Child&quot;);
        child.setSuperclass(parent);
        child.defrost();

        // scan all methods with @Schedule
        ClassFile childClassFile = child .getClassFile();
        ConstPool childConstPool = childClassFile.getConstPool();

        CtMethod[] ctMethods = child.getMethods();
        for (CtMethod ctMethod : ctMethods) {
            Object scheduleAnnotation = ctMethod.getAnnotation(Scheduled.class);
            if (scheduleAnnotation != null) {
                String cron = ((Scheduled) scheduleAnnotation).cron();
                if (StringUtils.isEmpty(cron) || !cron.startsWith(&quot;$&quot;)) {
                    continue;
                }

                // generate new pattern of @Schedule.cron
                String newPattern = generatPatternWithClassName(parent, cron);

                // generate new annotation
                AnnotationsAttribute annotationsAttribute = generateScheduleAnnotation(childConstPool, newPattern);

                // generate override method for child class, and set new annotation
                CtMethod overrideMethod = generateOverrideMethod(child, ctMethod, annotationsAttribute);

                // set body
                setOverrideMethodBody(ctMethod, overrideMethod);

                // add override method
                child.addMethod(overrideMethod);
            }
        }

        Class childClass = child.toClass();
        return ObjectUtil.copy(source, childClass);
    }

    private static void setOverrideMethodBody(CtMethod ctMethod, CtMethod overrideMethod) throws NotFoundException, CannotCompileException {
        // generate parameter string for calling super method
        int paramCount = ctMethod.getParameterTypes().length;
        StringBuilder paramNameStr = new StringBuilder();
        if (paramCount &amp;gt;= 1) {
            paramNameStr.append(&quot;$1&quot;);
        }
        for (int i = 1; i &amp;lt; paramCount; i++) {
            paramNameStr.append(&quot;, $&quot; + (i + 1));
        }

        // set method body
        boolean voidReturn = ctMethod.getReturnType() == null;
        StringBuilder body = new StringBuilder();
        body.append(&quot;{&quot;)
                .append(&quot;System.out.println(\&quot;execute in father class; \&quot;);&quot;)
                .append((voidReturn ? &quot;&quot; : &quot;return &quot;) + &quot;super.&quot; + ctMethod.getName() + &quot;(&quot; + paramNameStr.toString() + &quot;);&quot;) //
            .append(&quot;}&quot;);

        overrideMethod.setBody(body.toString());
    }

    private static CtMethod generateOverrideMethod(CtClass child, CtMethod ctMethod, AnnotationsAttribute annotationsAttribute) throws CannotCompileException {
        CtMethod overrideMethod = CtNewMethod.copy(ctMethod, child, null);
        for (Object attribute : ctMethod.getMethodInfo().getAttributes()) {
            if (!(attribute instanceof CodeAttribute)) {
                overrideMethod.getMethodInfo().addAttribute((AttributeInfo) attribute);
            }
        }
        overrideMethod.getMethodInfo().addAttribute(annotationsAttribute);
        return overrideMethod;
    }

    private static AnnotationsAttribute generateScheduleAnnotation(ConstPool childConstPool, String newPattern) {
        AnnotationsAttribute annotationsAttribute = new AnnotationsAttribute(childConstPool, AnnotationsAttribute.visibleTag);
        Annotation annotation = new Annotation(Scheduled.class.getName(), childConstPool);
        annotation.addMemberValue(&quot;cron&quot;, new StringMemberValue(&quot;${&quot; + newPattern + &quot;}&quot;, childConstPool));
        annotationsAttribute.addAnnotation(annotation);
        return annotationsAttribute;
    }

    private static String generatPatternWithClassName(CtClass parent, String cron) {
        int patternStart = cron.indexOf(&quot;{&quot;);
        int patternEnd = cron.indexOf(&quot;}&quot;);
        String pattern = cron.substring(patternStart + 1, patternEnd);
        return parent.getName() + &quot;.&quot; + pattern;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码比较长，可以大致分为下面几步，&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;使用javassit生成新的类&lt;/li&gt;
  &lt;li&gt;为新的类添加与带有 &lt;strong&gt;@Scheduled&lt;/strong&gt; 方法同名的方法&lt;/li&gt;
  &lt;li&gt;为这些方法添加 &lt;strong&gt;@Scheduled&lt;/strong&gt; 注解，注解的cron带有当前类名作为前缀&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;在xml中配置&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;context:property-placeholder location=&quot;classpath:application.properties&quot;/&amp;gt;
    &amp;lt;schedule:cron-attach-class/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在配置文件中配置&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spring.Schedule1.cron=0/5 * *  * * ? 
spring.Schedule2.cron=0/15 * *  * * ? 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;
运行在文中最开头提到的代码，可以得到如下的输出，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;schedule2
execute in father class; 
class Schedule1Child
schedule1
execute in father class; 
class Schedule1Child
schedule1
execute in father class; 
class Schedule1Child
schedule1
execute in father class; 
class Schedule2Child
schedule2
execute in father class; 
class Schedule1Child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;schedule2每执行一次，schedule1都已经执行了3次。和我们配置所要达到的预期一致。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;上面的方案在实现上忽略了很多的细节，还有许多待完善的地方，但是其核心目的已经达到了:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在不改动原有代码的基础上，在运行时注入，实现我们动态区分子任务调度时间的目的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;github地址:
https://github.com/lpmoon/spring-extension&lt;/p&gt;
</description>
				<pubDate>Sat, 25 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/spring/2017/11/25/spring@Scheduled%E6%89%A9%E5%B1%95.html</link>
				<guid isPermaLink="true">http://localhost:4000/spring/2017/11/25/spring@Scheduled%E6%89%A9%E5%B1%95.html</guid>
			</item>
		
			<item>
				<title>由一次面试引起的思考</title>
				<description>&lt;p&gt;前段时间找工作面试的时候遇到了一道算法题，题目的内容大致是这样的，&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一个数组，将其分为两部分使得两部分的和差最小。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;面试的时候没有想出很好的解决方法，后来回家后仔细的想了想发现问题其实不是那么复杂。下面说一下自己的思路，&lt;/p&gt;

&lt;p&gt;既然是分解成两个子数组，并且两个子数组之和差最小，那么一个数组的和就应该尽量的靠近原数组的和的一半，所以这时候的问题就转化成了下面的问题&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个数组a[n]，找出i个元素，并且i&amp;lt;=n，使得这i个元素对应的和尽可能的靠近 sum(a[0]..a[n-1]) / 2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相信很多人这时候都会觉得这个问题有点眼熟，是的这个问题其实就是我们非常熟悉的背包问题，如果你对背包问题理解的比较透彻的话，很快的就能写出对应的代码，无论是使用递归还是动态规划。&lt;/p&gt;

&lt;p&gt;写这篇文章的主要目的并不是讲解这道题本身应该怎么解决，而是希望将自己从这道题得到的启示记录下来。无论是生活中或者工作中都会遇到很多问题，这些问题或许看起来很复杂，但是如果你仔细思考，你会发现它其实都是你之前遇到的或者已经有比较成熟的解决方法的问题的变种。这就需要我们能够发现问题的本质，对问题进行一定程度的抽象。说到这又想到了之前工作中遇到的一个问题，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;之前某个项目主要是接收上传的文件并且记录元数据，也就是那个分片上传完成了，开始的时候各个分片大小是固定的，当时的技术方案通过在redis中记录了每个分片的对应的bit位，很好的解决了元数据记录的问题。但是后来有新的需求，分片的大小会改变，并且重传的时候可能和之前的分片有重合，比如说第2个分片是1000-2000，第三个分片传来1500到2500，这时候就需要修改当前的元数据记录方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相信大家看到这个问题的时候会第一时间想到对各个分片的大小进行计算，然后和之前上传的数据做对比，比较各种边缘情况。这样子做本质上是没有问题的，但是由于需要考虑到各种边缘情况给编码以及测试都带来了不小的难度。既然都是记录元数据的方案，那么新的方案能否向之前的靠拢呢？答案是肯定的，两者之间的本质问题，就是前者分片大小固定，不会出现重叠的情况，后者分片大小固定存在重叠的情况，我们需要做的是将后者转化为前者。有了这个思路，我们可能会想到将不固定大小的分片在逻辑上分成n个大小固定的分片，然后分别记录这n个分片的元数据，同时约定分片大小必须是固定分片大小的整数倍，比如我们约定这个固定大小分片为x，那么上传的分片大小则为n*x，就可以将原本复杂的问题解决了。&lt;/p&gt;

&lt;p&gt;除了上面提到的两个例子，工作中其实还有其他很多这种例子，比如我们耳熟能详的设计模式。我们在解决某些特定场景的问题时，往往会朝设计模式靠拢，比如当我们需要限定某个类的实例化的时候，往往会使用单例模式。虽然很多人觉得设计模式过于模式化，但是很多情况下将问题抽象为已有的设计模式，很大程度上帮助我们实现更为优雅的代码。&lt;/p&gt;

&lt;p&gt;总而言之，当我们遇到问题的时候，应该多思考，很多时候只要你做到适当的抽象，问题往往会迎刃而解。。&lt;/p&gt;
</description>
				<pubDate>Sun, 19 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/thinking/2017/11/19/%E7%94%B1%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83.html</link>
				<guid isPermaLink="true">http://localhost:4000/thinking/2017/11/19/%E7%94%B1%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83.html</guid>
			</item>
		
			<item>
				<title>Spring自定义标签</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#定义标签名称&quot;&gt;定义标签名称&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#定义namespace&quot;&gt;定义Namespace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#定义handler&quot;&gt;定义Handler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#定义parser&quot;&gt;定义Parser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#定义javainfotool&quot;&gt;定义JavaInfoTool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#添加配置文件&quot;&gt;添加配置文件&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#springhandlers&quot;&gt;spring.handlers&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#springschemas&quot;&gt;spring.schemas&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#spring-vm-xxxsd&quot;&gt;spring-vm-xx.xsd&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#打包&quot;&gt;打包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用&quot;&gt;使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;

&lt;p&gt;spring可以说是目前全球使用最为广泛的java框架之一，spring提供的ioc，aop等功能大大的提高了开发的效率。spring在提高效率的同时，提供很多了扩展槽。自定义标签就是扩展槽之一，其他框架可以无缝的嵌入到spring中，方便开发者使用，比如阿里巴巴之前开源的rpc框架dubbo就实现了自己的标签&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dubbo:application&amp;gt;、&amp;lt;dubbo:registry&amp;gt;、 &amp;lt;dubbo:service&amp;gt;&lt;/code&gt;等。下面我们会介绍如何在spring中使用自定义标签。首先我们先介绍下我们要实现的标签的功能:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;用户使用标签，在spring容器启动结束后，打印出jvm和系统的一些参数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;定义标签名称&quot;&gt;定义标签名称&lt;/h1&gt;
&lt;p&gt;完事开头难，起名字尤其难，为了方便开发者使用，一个好的名字既能明确表达框架作者的意图又能方便记忆。既然是打印虚拟机相关的参数，所以我们将标签定义为&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;vm&amp;gt;&lt;/code&gt;，子标签定义为&lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt;，这样完整的标签就是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;vm:info&amp;gt;&lt;/code&gt;。之所以我们需要定义子标签，是为了后面扩容其他功能。&lt;/p&gt;

&lt;h1 id=&quot;定义namespace&quot;&gt;定义Namespace&lt;/h1&gt;
&lt;p&gt;如果你之前阅读过一些spring的源码，应该知道每一个标签对应着一个Namespace，spring会根据Namespace查找Handler进行处理。所以接下来我们需要定一个Namespace，根据spring的命名规则，我们将其定义为&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.springframework.org/schema/vm&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;定义handler&quot;&gt;定义Handler&lt;/h1&gt;
&lt;p&gt;有了Namespace后，就需要定义Handler了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class VMHandler extends NamespaceHandlerSupport {

    @Override
    public void init() {
        registerBeanDefinitionParser(&quot;info&quot;, new JavaInfoBeanDefinitionParser());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参照&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;context&amp;gt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;vm&amp;gt;&lt;/code&gt;标签对应的Handler也继承自&lt;code class=&quot;highlighter-rouge&quot;&gt;NamespaceHandlerSupport&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;NamespaceHandlerSupport&lt;/code&gt;的功能不做过多的介绍了。VMHandler的初始化函数主要负责注册子标签的Parser，在这里就是&lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;定义parser&quot;&gt;定义Parser&lt;/h1&gt;
&lt;p&gt;Spring调用Handler的时候，会根据子标签的名字调用到具体的Parser，上面我们已经定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt;对应的Parser，下面看一下其具体实现。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class JavaInfoBeanDefinitionParser implements BeanDefinitionParser {

    @Override
    public BeanDefinition parse(Element element, ParserContext parserContext) {
        BeanDefinitionBuilder bdb = BeanDefinitionBuilder.genericBeanDefinition(JavaInfoTool.class);
        bdb.setDependencyCheck(DEPENDENCY_CHECK_SIMPLE);
        bdb.setScope(SCOPE_SINGLETON);

        BeanDefinition definition = bdb.getRawBeanDefinition();
        BeanDefinitionHolder holder = new BeanDefinitionHolder(definition, &quot;vm-java-info&quot;, null);
        registerBeanDefinition(holder, parserContext.getRegistry());

        return definition;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Parser对应的功能比较简单，注册BeanDefinition，这个BeanDefinition对应的类是JavaInfoTool，也就是我们实现打印vm信息的类，同时给这个BeanDefinition定义一个id，id是&lt;code class=&quot;highlighter-rouge&quot;&gt;vm-java-info&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;定义javainfotool&quot;&gt;定义JavaInfoTool&lt;/h1&gt;
&lt;p&gt;为了完成在Spring容器启动后打印vm信息的功能，JavaInfoTool需要保证在最后执行，最直接的方法是继承ApplicationListener，在Spring容器状态发生变化的时候调用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class JavaInfoTool implements ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; {

    public void printJavaInfo() {
        Properties properties = System.getProperties();
        for (Map.Entry entry : properties.entrySet()) {
            System.out.printf(&quot;%20s -&amp;gt; %s\r\n&quot;, entry.getKey(), entry.getValue());
        }
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        if(event.getApplicationContext().getParent() == null) {
            printJavaInfo();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;实现打印vm信息的代码逻辑比较简单，这里就不做过多介绍了。&lt;/p&gt;

&lt;h1 id=&quot;添加配置文件&quot;&gt;添加配置文件&lt;/h1&gt;
&lt;p&gt;到这里代码层面的工作都差不多完成了，但是还是不能直接使用。我们需要定义三个文件，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;spring.handlers&lt;/li&gt;
  &lt;li&gt;spring.schemas&lt;/li&gt;
  &lt;li&gt;spring-vm-xx.xsd&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;springhandlers&quot;&gt;spring.handlers&lt;/h2&gt;
&lt;p&gt;这个文件用于指定Namespace对应的Handler，Spring在启动过程中会扫描这个文件，加载对应关系。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http\://www.springframework.org/schema/vm=com.lpmoon.spring.VMInfoHandler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;springschemas&quot;&gt;spring.schemas&lt;/h2&gt;
&lt;p&gt;这个文件用于定义对应Schema文件所在位置，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http\://www.springframework.org/schema/vm/spring-vm-2.5.xsd=com/lpmoon/spring/spring-vm-2.5.xsd
http\://www.springframework.org/schema/vm/spring-vm-3.0.xsd=com/lpmoon/spring/spring-vm-3.0.xsd
http\://www.springframework.org/schema/vm/spring-vm-3.1.xsd=com/lpmoon/spring/spring-vm-3.1.xsd
http\://www.springframework.org/schema/vm/spring-vm-3.2.xsd=com/lpmoon/spring/spring-vm-3.2.xsd
http\://www.springframework.org/schema/vm/spring-vm-4.0.xsd=com/lpmoon/spring/spring-vm-4.0.xsd
http\://www.springframework.org/schema/vm/spring-vm-4.1.xsd=com/lpmoon/spring/spring-vm-4.1.xsd
http\://www.springframework.org/schema/vm/spring-vm-4.2.xsd=com/lpmoon/spring/spring-vm-4.2.xsd
http\://www.springframework.org/schema/vm/spring-vm-4.3.xsd=com/lpmoon/spring/spring-vm-4.3.xsd
http\://www.springframework.org/schema/vm/spring-vm.xsd=com/lpmoon/spring/spring-vm-4.3.xsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;spring-vm-xxxsd&quot;&gt;spring-vm-xx.xsd&lt;/h2&gt;
&lt;p&gt;因为我们需要支持从2-x到4-x多个版本的Spring，所以我们需要根据spring.schemas重定义的schema创建多个版本的xsd文件，文件放置在&lt;code class=&quot;highlighter-rouge&quot;&gt;com/lpmoon/spring/&lt;/code&gt;目录下。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:schema&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/vm&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;xmlns:xsd=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;xmlns:tool=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/tool&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;targetNamespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/vm&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;elementFormDefault=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;qualified&quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;attributeFormDefault=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unqualified&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:annotation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:documentation&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[
	Defines the vm elements for the Spring Framework's application
	context support.
		]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:documentation&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:annotation&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:annotation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:documentation&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[
java info.
			]]&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:documentation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;xsd:appinfo&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;tool:annotation&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;tool:exports&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.lpmoon.spring.JavaInfoTool&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tool:annotation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:appinfo&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:annotation&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的文件定义了vm标签，以及子标签info的含义。&lt;/p&gt;

&lt;h1 id=&quot;打包&quot;&gt;打包&lt;/h1&gt;
&lt;p&gt;到这里所有的文件都已经定义好了，我们来看一看具体的文件结构，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|____pom.xml
|____src
| |____main
| | |____java
| | | |____com
| | | | |____lpmoon
| | | | | |____spring
| | | | | | |____JavaInfoBeanDefinitionParser.java
| | | | | | |____JavaInfoTool.java
| | | | | | |____spring-vm-2.5.xsd
| | | | | | |____spring-vm-3.0.xsd
| | | | | | |____spring-vm-3.1.xsd
| | | | | | |____spring-vm-3.2.xsd
| | | | | | |____spring-vm-4.0.xsd
| | | | | | |____spring-vm-4.1.xsd
| | | | | | |____spring-vm-4.2.xsd
| | | | | | |____spring-vm-4.3.xsd
| | | | | | |____VMHandler.java
| | |____resources
| | | |____META-INF
| | | | |____spring.handlers
| | | | |____spring.schemas

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了方便他人使用我们需要将我们定义的文件打包成jar文件，配置pom文件如下，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-resources-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;copy-xmls&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;process-sources&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;copy-resources&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                        &amp;lt;configuration&amp;gt;
                            &amp;lt;outputDirectory&amp;gt;${basedir}/target/classes&amp;lt;/outputDirectory&amp;gt;
                            &amp;lt;resources&amp;gt;
                                &amp;lt;resource&amp;gt;
                                    &amp;lt;directory&amp;gt;${basedir}/src/main/java&amp;lt;/directory&amp;gt;
                                    &amp;lt;includes&amp;gt;
                                        &amp;lt;include&amp;gt;**/*.xsd&amp;lt;/include&amp;gt;
                                    &amp;lt;/includes&amp;gt;
                                &amp;lt;/resource&amp;gt;
                            &amp;lt;/resources&amp;gt;
                        &amp;lt;/configuration&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的配置的主要作用是将xsd文件打包到对应的目录下，否则使用该jar启动的时候会报错。执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;后对应的jar包里面的内容为&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|____com
| |____lpmoon
| | |____spring
| | | |____JavaInfoBeanDefinitionParser.class
| | | |____JavaInfoTool.class
| | | |____spring-vm-2.5.xsd
| | | |____spring-vm-3.0.xsd
| | | |____spring-vm-3.1.xsd
| | | |____spring-vm-3.2.xsd
| | | |____spring-vm-4.0.xsd
| | | |____spring-vm-4.1.xsd
| | | |____spring-vm-4.2.xsd
| | | |____spring-vm-4.3.xsd
| | | |____VMInfoHandler.class
|____META-INF
| |____spring.handlers
| |____spring.schemas

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;使用&quot;&gt;使用&lt;/h1&gt;

&lt;p&gt;建立项目，在对应的配置文件中添加如下配置，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;vm:info/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后启动代码，可以看到如下输出，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   java.runtime.name -&amp;gt; Java(TM) SE Runtime Environment
sun.boot.library.path -&amp;gt; /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib

......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
				<pubDate>Sat, 18 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/spring/2017/11/18/spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE.html</link>
				<guid isPermaLink="true">http://localhost:4000/spring/2017/11/18/spring%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE.html</guid>
			</item>
		
			<item>
				<title>Spring加载过程</title>
				<description>&lt;!-- TOC --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#初始化bean-factory-查找bean的所有定义&quot;&gt;初始化bean factory, 查找bean的所有定义&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#默认的namespace&quot;&gt;默认的namespace&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#自定义namespace&quot;&gt;自定义namespace&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#配置bean-factory&quot;&gt;配置bean factory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#初始化事件广播器&quot;&gt;初始化事件广播器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#子类初始化方法&quot;&gt;子类初始化方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#注册事件监听器&quot;&gt;注册事件监听器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#根据查找到的所有定义的bean进行初始化&quot;&gt;根据查找到的所有定义的bean，进行初始化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- /TOC --&gt;
&lt;p&gt;spring的启动过程在AbstractApplicationContext的refresh函数中，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IllegalStateException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startupShutdownMonitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Prepare this context for refreshing.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;prepareRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Tell the subclass to refresh the internal bean factory.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obtainFreshBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Prepare the bean factory for use in this context.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;prepareBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Allows post-processing of the bean factory in context subclasses.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Invoke factory processors registered as beans in the context.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Register bean processors that intercept bean creation.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;registerBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Initialize message source for this context.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;initMessageSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Initialize event multicaster for this context.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;initApplicationEventMulticaster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Initialize other special beans in specific context subclasses.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;onRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Check for listener beans and register them.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;registerListeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;// Last step: publish corresponding event.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;finishRefresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            	&lt;span class=&quot;c1&quot;&gt;// exception handle&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Reset common introspection caches in Spring's core, since we&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// might not ever need metadata for singleton beans anymore...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;resetCommonCaches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的过程主要分为以下几个部分&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;初始化bean factory, 查找bean的所有定义&lt;/li&gt;
  &lt;li&gt;配置bean factory&lt;/li&gt;
  &lt;li&gt;初始化事件广播器&lt;/li&gt;
  &lt;li&gt;子类初始化方法&lt;/li&gt;
  &lt;li&gt;注册事件监听器&lt;/li&gt;
  &lt;li&gt;根据查找到的所有定义的bean，进行初始化&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;初始化bean-factory-查找bean的所有定义&quot;&gt;初始化bean factory, 查找bean的所有定义&lt;/h1&gt;

&lt;p&gt;bean的定义由obtainFreshBeanFactory()函数完成，这个函数会初始化一个bean factory，所有定义好的bean会存储在bean factory的一个map中。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;obtainFreshBeanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refreshBeanFactory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refreshBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;destroyBeans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;closeBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSerializationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;customizeBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactoryMonitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationContextException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I/O error parsing bean definition source for &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDisplayName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;refresh函数中完成bean factory的定义以及初始化，同时查找所有bean的定义。需要注意的是customizeBeanFactory会对bean factory进行一些配置，主要包括下面的两个属性&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;是否允许bean覆盖 -&amp;gt;  allowBeanDefinitionOverriding&lt;/li&gt;
  &lt;li&gt;是否允许循环引用 -&amp;gt; allowCircularReferences&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里需要大致介绍下这两个属性，allowBeanDefinitionOverriding表示是否允许定义重名的bean，如果不允许则会抛出异常，否则会进行覆盖。allowCircularReferences表示是否允许循环依赖，所谓的循环依赖是指两个bean互相依赖，bean A是bean B的一个属性同时bean B也是bean A的一个属性，这样初始化bean A就需要先完成bean B的初始化，初始化bean B又需要bean A的初始化，这就产生了循环依赖的情况，下面会提到spring是如何完成循环依赖的注入的。需要注意的是allowBeanDefinitionOverriding用于bean定义阶段，而allowCircularReferences用于初始化阶段。&lt;/p&gt;

&lt;p&gt;在配置完bean factory后就进入到正是的查找bean定义阶段了，完成这项工作的是loadBeanDefinitions。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Create a new XmlBeanDefinitionReader for the given BeanFactory.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;XmlBeanDefinitionReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlBeanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Configure the bean definition reader with this context's&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// resource loading environment.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEntityResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceEntityResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Allow a subclass to provide custom initialization of the reader,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// then proceed with actually loading the bean definitions.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;initBeanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinitionReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;由于我们需要加载的bean一部分定义在xml中，所以我们需要读取xml文件，在spring中这个功能由XmlBeanDefinitionReader完成。定义好xml的reader后，继续调用重载函数loadBeanDefinitions进行加载，不同的是此时参数已经变成了刚才定义的reader。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XmlBeanDefinitionReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configResources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getConfigResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configResources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configLocations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getConfigLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configLocations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configLocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loadBeanDefinitions会针对每一个xml资源调用一次reader的loadBeanDefinitions函数进行加载，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;notNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Location array must not be null&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过资源查找一系列操作后最终会进入到下面的方法中，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EncodedResource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EncodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resourcesCurrentlyBeingLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EncodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resourcesCurrentlyBeingLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionStoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;Detected cyclic loading of &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; - check your import definitions!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;InputSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;inputSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doLoadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionStoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;IOException parsing XML document from &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodedResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resourcesCurrentlyBeingLoaded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码比较长大致可以分为三个阶段&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;记录当前正在处理的resource，如果当前resource已经在处理中则会抛出异常&lt;/li&gt;
  &lt;li&gt;获取文件的流&lt;/li&gt;
  &lt;li&gt;读取流并且进行bean加载&lt;/li&gt;
  &lt;li&gt;加载成功后从正在处理的resource集合中移除当前resource&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doLoadBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doLoadDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// handle exception&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;继续沿着上面的代码往下跟踪会进入到parseBeanDefinitions(Element root, …)中，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionParserDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDefaultNamespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;NodeList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getChildNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDefaultNamespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;parseDefaultElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseCustomElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseCustomElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码扫描root节点的每个子节点，然后判断子节点是否是Element，如果不是则继续下一个子节点，如果是则判断是否是默认的namespace，如果是则调用parseDefaultElement处理，否则调用delegate的parseCustomElement进行处理。这里需要说明一下默认的namespace是指 &lt;strong&gt;http://www.springframework.org/schema/beans&lt;/strong&gt; ，如果我们在xml中设置了下面的配置&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;context:annotation-config /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么这个配置对应的namespace则是 &lt;strong&gt;http://www.springframework.org/schema/context&lt;/strong&gt; ，与默认的就不相同了。&lt;/p&gt;

&lt;h2 id=&quot;默认的namespace&quot;&gt;默认的namespace&lt;/h2&gt;
&lt;p&gt;首先我们先看一下默认的namespace会进行什么处理，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseDefaultElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionParserDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nodeNameEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMPORT_ELEMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;importBeanDefinitionResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nodeNameEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALIAS_ELEMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;processAliasRegistration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nodeNameEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BEAN_ELEMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;processBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nodeNameEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NESTED_BEANS_ELEMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// recurse&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;doRegisterBeanDefinitions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;从代码我们可以推断出有四个element属于默认的namespace，分别是&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;import -&amp;gt; 引入其他配置文件&lt;/li&gt;
  &lt;li&gt;alias -&amp;gt; 给某个bean起一个别名&lt;/li&gt;
  &lt;li&gt;bean -&amp;gt; bean定义&lt;/li&gt;
  &lt;li&gt;beans -&amp;gt; 内嵌的beans&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果是import类型的，则会解析import中定义的配置路径，然后根据解析出的路径进行bean definition。如果是alias，则记录alias到原始名称的映射关系，这个映射关系存储在map表中。如果是bean类型的则调用processBeanDefinition处理。如果是beans的，则调用doRegisterBeanDefinitions进行递归处理。&lt;/p&gt;

&lt;p&gt;在这里我们重点关注下element为bean类型的，因为上面的其他三种类型最终都会转化为bean类型。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;cm&quot;&gt;/**
	 * Process the given bean element, parsing the bean definition
	 * and registering it with the registry.
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;processBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionParserDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BeanDefinitionHolder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseBeanDefinitionElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decorateBeanDefinitionIfRequired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Register the final decorated instance.&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;BeanDefinitionReaderUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getReaderContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanDefinitionStoreException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;getReaderContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to register bean definition with name '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// Send registration event.&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;getReaderContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fireComponentRegistered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanComponentDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bdHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码不是很复杂，主要是解析element里面的各个元素包括name, class, init-method, alias等等，然后将其封装到BeanDefinitionHolder中，然后将其注册到bean factory中。如果bean设置了alias则需要将alias到原始名称的映射记录下来，这个操作和上面的alias类型一致。bean的注册调用的是registerBeanDefinition方法，这里面会用到我们之前提过的allowBeanDefinitionOverriding属性判断当前bean是否应该被注册，具体代码可以参照下面&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAllowBeanDefinitionOverriding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanDefinitionStoreException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
						&lt;span class=&quot;s&quot;&gt;&quot;Cannot register bean definition [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
						&lt;span class=&quot;s&quot;&gt;&quot;': There is already [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] bound.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isWarnEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding user-defined bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;s&quot;&gt;&quot;' with a framework-generated bean definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInfoEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;s&quot;&gt;&quot;' with a different definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDebugEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Overriding bean definition for bean '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;s&quot;&gt;&quot;' with an equivalent definition: replacing [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldBeanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
							&lt;span class=&quot;s&quot;&gt;&quot;] with [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beanDefinitionMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;方法首先会从beanDefinitionMap中获取beanDefinition，如果没有则进行注册，如果有了则判断是否允许覆盖，这里就是通过allowBeanDefinitionOverriding参数完成的。如果不允许覆盖，则会直接抛出异常。&lt;/p&gt;

&lt;h2 id=&quot;自定义namespace&quot;&gt;自定义namespace&lt;/h2&gt;
&lt;p&gt;上面描述了默认namespace的处理过程，下面会对自定义namespace的解析过程做一个大致的描述。为了更好的说明，我们以&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;context:annotation-config&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;为例。&lt;/p&gt;

&lt;p&gt;首先会调用BeanDefinitionParserDelegate的parseCustomElement进行处理，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseCustomElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseCustomElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接下来处理会交给parseCustomElement方法，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseCustomElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containingBd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespaceUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNamespaceURI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;NamespaceHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getNamespaceHandlerResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespaceUri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unable to locate Spring NamespaceHandler for XML schema namespace [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespaceUri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readerContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containingBd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码首先获取element对应的namespace，然后获取对应的handler。所有handler的定义来自META-INF/spring.handlers文件，spring解析类路径下的所有spring.handlers文件，然后将其合并问一个map，map的key为namespace，value是对应的handler的类名称。解析完所有的spring.handlers文件后，spring遍历map，通过类加载器加载所有handler类，并且进行初始化，放到handlerMappings（一个map）中，对应的key是namespace，value是handler实例。
因为我们以context标签为例，所以这里获取的handler就是ContextNamespaceHandler。获取到handler后，进入到parse阶段，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinition&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParserContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findParserForElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
	 * Locates the {@link BeanDefinitionParser} from the register implementations using
	 * the local name of the supplied {@link Element}.
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanDefinitionParser&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findParserForElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParserContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocalName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;BeanDefinitionParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;parserContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReaderContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fatal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;s&quot;&gt;&quot;Cannot locate BeanDefinitionParser for element [&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;从parse函数可以看出，ContextNamespaceHandler不是最终的处理类，它还会根据local name也就是上面标签中的annotation-config查找对应的parser，具体到这个例子对应的parser是AnnocationConfigBeanDefinitionParser，这个parser是在ContextNamespaceHandler初始化的时候注册到handler中的&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContextNamespaceHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NamespaceHandlerSupport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;property-placeholder&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertyPlaceholderBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;property-override&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertyOverrideBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 这里就是上面提到的parser&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;annotation-config&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnnotationConfigBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;component-scan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComponentScanBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load-time-weaver&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadTimeWeaverBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring-configured&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringConfiguredBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mbean-export&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBeanExportBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;registerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mbean-server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MBeanServerBeanDefinitionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;AnnotationConfigBeanDefinitionParser将Annotation相关的一些Processor注册到bean factory中，包括&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ConfigurationClassPostProcessor&lt;/li&gt;
  &lt;li&gt;AutowiredAnnotationBeanPostProcessor&lt;/li&gt;
  &lt;li&gt;RequiredAnnotationBeanPostProcessor&lt;/li&gt;
  &lt;li&gt;CommonAnnotationBeanPostProcessor
等，这些都是用来处理在spring中出现的注解的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;到这为止，bean的定义阶段就完成了，下面进入bean factory的配置阶段&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;配置bean-factory&quot;&gt;配置bean factory&lt;/h1&gt;

&lt;p&gt;bean factory的配置阶段分为多步，&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;准备阶段&lt;/li&gt;
  &lt;li&gt;后处理阶段，目前什么都没做&lt;/li&gt;
  &lt;li&gt;调用ApplicationContext中设置的BeanFactoryPostProcessor和bean factory加载的所有BeanFactoryPostProcessor处理bean factory&lt;/li&gt;
  &lt;li&gt;查找bean factory加载的所有BeanPostProcessor，然后设置到bean factory的beanPostProcessors中
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         &lt;span class=&quot;c1&quot;&gt;// Prepare the bean factory for use in this context.&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;prepareBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

         &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;c1&quot;&gt;// Allows post-processing of the bean factory in context subclasses.&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

             &lt;span class=&quot;c1&quot;&gt;// Invoke factory processors registered as beans in the context.&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;invokeBeanFactoryPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

             &lt;span class=&quot;c1&quot;&gt;// Register bean processors that intercept bean creation.&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;registerBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                
             &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
                
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;第四步提到的所有beanPostProcessors在bean初始化之后会依次进行调用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;初始化事件广播器&quot;&gt;初始化事件广播器&lt;/h1&gt;
&lt;p&gt;事件广播器用于广播消息，所有的消息会被后面注册的监听器所处理&lt;/p&gt;

&lt;h1 id=&quot;子类初始化方法&quot;&gt;子类初始化方法&lt;/h1&gt;
&lt;p&gt;该步骤需要AbstractApplicationContext的子类覆写onRefresh方法&lt;/p&gt;

&lt;h1 id=&quot;注册事件监听器&quot;&gt;注册事件监听器&lt;/h1&gt;
&lt;p&gt;该步骤注册的所有监听器会接收到消息广播器推送的消息，并且进行处理&lt;/p&gt;

&lt;h1 id=&quot;根据查找到的所有定义的bean进行初始化&quot;&gt;根据查找到的所有定义的bean，进行初始化&lt;/h1&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finishBeanFactoryInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigurableListableBeanFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Initialize conversion service for this context.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isTypeMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONVERSION_SERVICE_BEAN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Register a default embedded value resolver if no bean post-processor&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// (such as a PropertyPlaceholderConfigurer bean) registered any before:&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// at this point, primarily for resolution in annotation attribute values.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasEmbeddedValueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addEmbeddedValueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringValueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveStringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolvePlaceholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strVal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBeanNamesForType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadTimeWeaverAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaverAwareNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weaverAwareName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Stop using the temporary ClassLoader for type matching.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTempClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Allow for caching all bean definition metadata, not expecting further changes.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;freezeConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Instantiate all remaining (non-lazy-init) singletons.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;beanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;preInstantiateSingletons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;设置Conversation Service&lt;/li&gt;
  &lt;li&gt;如果没有设置StringValueResolver，则设置默认的StringValueResolver。StringValueResolver用于解析bean初始化时传入的字符串，这里的字符串包括一些模板类型的通配符，例如${xxx}&lt;/li&gt;
  &lt;li&gt;加载bean&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第三步的加载bean是通过bean factory的preInstantiateSingletons来完成的，该函数遍历bean factory中所有的bean definition，如果bean不是抽象的，是单例的，并且不是延迟加载的，则进行初始化。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;c1&quot;&gt;// Trigger initialization of all non-lazy singleton beans...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getMergedLocalBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isAbstract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isLazyInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FACTORY_BEAN_PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
							&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
							&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SmartFactoryBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
								&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SmartFactoryBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEagerInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;初始化由getBean方法完成，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doGetBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;doGetBean代码比较长，提炼一下核心的代码如下所示，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;				&lt;span class=&quot;c1&quot;&gt;// Create bean instance.&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
						&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
							&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
							&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
								&lt;span class=&quot;c1&quot;&gt;// Explicitly remove instance from singleton cache: It might have been put there&lt;/span&gt;
								&lt;span class=&quot;c1&quot;&gt;// eagerly by the creation process, to allow for circular reference resolution.&lt;/span&gt;
								&lt;span class=&quot;c1&quot;&gt;// Also remove any beans that received a temporary reference to the bean.&lt;/span&gt;
								&lt;span class=&quot;n&quot;&gt;destroySingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
								&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
							&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getObjectForBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isPrototype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;// It's a prototype -&amp;gt; create a new instance.&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prototypeInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;beforePrototypeCreation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;prototypeInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;afterPrototypeCreation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getObjectForBeanInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prototypeInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;doGetBean对单例和多例的处理是不一样的，这里以单例为例。bean的创建最终交给了ObjectFactory的getObject方法，getObject调用createBean，createBean调用doCreateBean，doCreateBean先创建bean&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceWrapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWrappedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后调用populateBean初始化bean，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;cm&quot;&gt;/**
	 * Populate the bean instance in the given BeanWrapper with the property values
	 * from the bean definition.
	 * @param beanName the name of the bean
	 * @param mbd the bean definition for the bean
	 * @param bw BeanWrapper with bean instance
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;populateBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;PropertyValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropertyValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cannot apply property values to null instance&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Skip property population phase for null instance.&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// state of the bean before properties are set. This can be used, for example,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// to support styles of field injection.&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continueWithPropertyPopulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasInstantiationAwareBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ibp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ibp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postProcessAfterInstantiation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWrappedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;continueWithPropertyPopulation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continueWithPropertyPopulation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResolvedAutowireMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTOWIRE_BY_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResolvedAutowireMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTOWIRE_BY_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;MutablePropertyValues&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutablePropertyValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Add property values based on autowire by name if applicable.&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResolvedAutowireMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTOWIRE_BY_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;autowireByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;// Add property values based on autowire by type if applicable.&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResolvedAutowireMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AUTOWIRE_BY_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;autowireByType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasInstAwareBpps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasInstantiationAwareBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needsDepCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDependencyCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DEPENDENCY_CHECK_NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInstAwareBpps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needsDepCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;PropertyDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filteredPds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterPropertyDescriptorsForDependencyCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;allowCaching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasInstAwareBpps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getBeanPostProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ibp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstantiationAwareBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ibp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postProcessPropertyValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filteredPds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWrappedInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
							&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;needsDepCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;checkDependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filteredPds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;applyPropertyValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pvs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;先获取该bean配置的所有property。依次调用bean factory中各个post processor的postProcessAfterInstantiation方法，然后依次调用bean factory中各个post processor的postProcessPropertyValues方法。如果我们设置了 &lt;strong&gt;&lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;&lt;/strong&gt; ，则会在当前bean对应的类中查找带有 &lt;strong&gt;@Autowired&lt;/strong&gt; 注解的field， 然后加载field对应的bean，然后进行注入操作。&lt;/p&gt;

&lt;p&gt;然后调用applyPropertyValues加载各个property对应的bean，同时注入到当前bean中，核心代码如下所示，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isConverted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;deepCopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueResolver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resolveValueIfNecessary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isWritableProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PropertyAccessorUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNestedOrIndexedProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propertyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertForProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolvedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;propertyName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;converter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Possibly store converted value in merged bean definition,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// in order to avoid re-conversion for every created bean instance.&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolvedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConvertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;deepCopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypedStringValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;!((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypedStringValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isDynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
						&lt;span class=&quot;o&quot;&gt;!(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setConvertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;deepCopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;resolveNecessary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;deepCopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PropertyValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面的代码1处获取到field的名称和值后，调用valueResolver的resolveValueIfNecessary获取需要注入到field的实际值。resolveValueIfNecessary根据value的不同类型，调用不同的解析函数，如果是自定义的类，则调用resolveReference。resolveReference内部则调用beanFactory的getBean方法递归加载当前bean所依赖的bean。&lt;/p&gt;

&lt;p&gt;populateBean设置完依赖之后，则调用initializeBean继续完成bean的初始化操作，&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initializeBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootBeanDefinition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSecurityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;AccessController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doPrivileged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrivilegedAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccessControlContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;invokeAwareMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyBeanPostProcessorsBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;invokeInitMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BeanCreationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
					&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResourceDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Invocation of init method failed&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mbd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isSynthetic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyBeanPostProcessorsAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrappedBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码主要完成两件事情，&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;调用bean factory中定义的post processor初始化当前bean。如果我们在当前bean对应的类中使用了 &lt;strong&gt;@PostConstruct&lt;/strong&gt; 注解符，同时设置了 &lt;strong&gt;&lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;&lt;/strong&gt; ，则会调用注解符所在的函数进行初始化。对应上面的代码1&lt;/li&gt;
  &lt;li&gt;如果bean对应的类实现了InitializingBean接口，则调用afterPropertiesSet方法。如果bean在定义的时候指定了init-method，则调用init-method。对应上面的代码2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;至此spring的加载过程就完成了。&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
				<pubDate>Fri, 13 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/spring/2017/10/13/spring%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html</link>
				<guid isPermaLink="true">http://localhost:4000/spring/2017/10/13/spring%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.html</guid>
			</item>
		
	</channel>
</rss>
